import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import threading
import os
import sys
from pathlib import Path
import cv2
import numpy as np
from PIL import Image, ImageTk
import subprocess
import json

# Import class hu·∫•n luy·ªán t·ª´ file ch√≠nh
try:
    from train_dayantoan import HuanLuyenNhanDienDayAnToan
except ImportError:
    print("Kh√¥ng th·ªÉ import HuanLuyenNhanDienDayAnToan. Vui l√≤ng ƒë·∫£m b·∫£o file train_dayantoan.py c√≥ trong c√πng th∆∞ m·ª•c.")
    sys.exit(1)

class GiaoDienHuanLuyen:
    def __init__(self, root):
        self.root = root
        self.root.title("Hu·∫•n Luy·ªán YOLOv8n - Nh·∫≠n Di·ªán D√¢y An To√†n")
        self.root.geometry("1200x800")
        self.root.configure(bg="#f0f0f0")
        
        # Kh·ªüi t·∫°o b·ªô hu·∫•n luy·ªán
        self.bo_huan_luyen = None
        self.duong_dan_dataset = tk.StringVar(value="seatbelt_dataset")
        self.so_epoch = tk.IntVar(value=50)
        self.kich_thuoc_anh = tk.IntVar(value=640)
        self.batch_size = tk.IntVar(value=8)
        self.duong_dan_model = tk.StringVar(value="modelantoan/nhan_dien_day_an_toan_tot_nhat.pt")
        
        # T·∫°o giao di·ªán
        self.tao_giao_dien()
        
        # Redirect stdout ƒë·ªÉ hi·ªÉn th·ªã trong GUI
        self.redirect_stdout()
        
    def tao_giao_dien(self):
        """T·∫°o c√°c th√†nh ph·∫ßn giao di·ªán"""
        
        # Title
        title_frame = tk.Frame(self.root, bg="#2c3e50", height=60)
        title_frame.pack(fill=tk.X, padx=5, pady=5)
        title_frame.pack_propagate(False)
        
        title_label = tk.Label(title_frame, text="üöó HU·∫§N LUY·ªÜN YOLOV8N - NH·∫¨N DI·ªÜN D√ÇY AN TO√ÄN", 
                              font=("Arial", 16, "bold"), fg="white", bg="#2c3e50")
        title_label.pack(expand=True)
        
        # Main container
        main_frame = tk.Frame(self.root, bg="#f0f0f0")
        main_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Left panel - Controls
        left_frame = tk.Frame(main_frame, bg="white", relief=tk.RAISED, bd=1)
        left_frame.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 5))
        
        # Right panel - Log output
        right_frame = tk.Frame(main_frame, bg="white", relief=tk.RAISED, bd=1)
        right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        
        # T·∫°o c√°c section trong left panel
        self.tao_section_cau_hinh(left_frame)
        self.tao_section_dataset(left_frame)
        self.tao_section_huan_luyen(left_frame)
        self.tao_section_danh_gia(left_frame)
        self.tao_section_du_doan(left_frame)
        
        # T·∫°o log output
        self.tao_log_output(right_frame)
        
    def tao_section_cau_hinh(self, parent):
        """Section c·∫•u h√¨nh dataset"""
        frame = tk.LabelFrame(parent, text="üìÅ C·∫•u h√¨nh Dataset", font=("Arial", 10, "bold"), 
                             bg="white", fg="#2c3e50", padx=10, pady=5)
        frame.pack(fill=tk.X, padx=10, pady=5)
        
        # Dataset path
        tk.Label(frame, text="ƒê∆∞·ªùng d·∫´n Dataset:", bg="white").pack(anchor=tk.W)
        path_frame = tk.Frame(frame, bg="white")
        path_frame.pack(fill=tk.X, pady=(0, 10))
        
        tk.Entry(path_frame, textvariable=self.duong_dan_dataset, width=25).pack(side=tk.LEFT, fill=tk.X, expand=True)
        tk.Button(path_frame, text="Ch·ªçn", command=self.chon_dataset, bg="#3498db", fg="white",
                 font=("Arial", 8)).pack(side=tk.RIGHT, padx=(5, 0))
                 
    def tao_section_dataset(self, parent):
        """Section x·ª≠ l√Ω dataset"""
        frame = tk.LabelFrame(parent, text="üîß X·ª≠ l√Ω Dataset", font=("Arial", 10, "bold"),
                             bg="white", fg="#2c3e50", padx=10, pady=5)
        frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Button(frame, text="üèóÔ∏è  T·∫°o c·∫•u tr√∫c YOLO", command=self.tao_cau_truc_yolo,
                 bg="#e74c3c", fg="white", font=("Arial", 9, "bold"), width=25).pack(pady=2)
        
        tk.Button(frame, text="üìä X·ª≠ l√Ω ·∫£nh v√† nh√£n", command=self.xu_ly_anh_nhan,
                 bg="#f39c12", fg="white", font=("Arial", 9, "bold"), width=25).pack(pady=2)
        tk.Button(frame, text="üìã T·∫°o file c·∫•u h√¨nh YAML", command=self.tao_yaml,
                 bg="#9b59b6", fg="white", font=("Arial", 9, "bold"), width=25).pack(pady=2)
                 
    def tao_section_huan_luyen(self, parent):
        """Section hu·∫•n luy·ªán model"""  
        frame = tk.LabelFrame(parent, text="üöÄ Hu·∫•n luy·ªán Model", font=("Arial", 10, "bold"),
                             bg="white", fg="#2c3e50", padx=10, pady=5)
        frame.pack(fill=tk.X, padx=10, pady=5)
        
        # Training parameters
        params_frame = tk.Frame(frame, bg="white")
        params_frame.pack(fill=tk.X, pady=5)
        
        # Epoch
        tk.Label(params_frame, text="S·ªë Epoch:", bg="white").grid(row=0, column=0, sticky="w", padx=5)
        tk.Entry(params_frame, textvariable=self.so_epoch, width=10).grid(row=0, column=1, padx=5)
        
        # Image size
        tk.Label(params_frame, text="K√≠ch th∆∞·ªõc ·∫£nh:", bg="white").grid(row=1, column=0, sticky="w", padx=5)
        tk.Entry(params_frame, textvariable=self.kich_thuoc_anh, width=10).grid(row=1, column=1, padx=5)
        
        # Batch size
        tk.Label(params_frame, text="Batch size:", bg="white").grid(row=2, column=0, sticky="w", padx=5)
        tk.Entry(params_frame, textvariable=self.batch_size, width=10).grid(row=2, column=1, padx=5)
        
        # Progress bar
        self.progress_var = tk.DoubleVar(value=0)
        self.progress_bar = ttk.Progressbar(frame, 
                                          variable=self.progress_var,
                                          maximum=100)
        self.progress_bar.pack(fill=tk.X, padx=5, pady=5)
        
        # Training button
        tk.Button(frame, text="üöÄ B·∫Øt ƒë·∫ßu hu·∫•n luy·ªán", command=self.bat_dau_huan_luyen,
                 bg="#27ae60", fg="white", font=("Arial", 10, "bold"), width=25).pack(pady=10)
                 
    def tao_section_danh_gia(self, parent):
        """Section ƒë√°nh gi√° model"""
        frame = tk.LabelFrame(parent, text="üìà ƒê√°nh gi√° Model", font=("Arial", 10, "bold"),
                             bg="white", fg="#2c3e50", padx=10, pady=5)
        frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Button(frame, text="üìä ƒê√°nh gi√° model", command=self.danh_gia_model,
                 bg="#34495e", fg="white", font=("Arial", 9, "bold"), width=25).pack(pady=2)
        
        tk.Button(frame, text="üìà Xem bi·ªÉu ƒë·ªì", command=self.xem_bieu_do,
                 bg="#16a085", fg="white", font=("Arial", 9, "bold"), width=25).pack(pady=2)
                 
    def tao_section_du_doan(self, parent):
        """Section d·ª± ƒëo√°n"""
        frame = tk.LabelFrame(parent, text="üîç D·ª± ƒëo√°n", font=("Arial", 10, "bold"),
                             bg="white", fg="#2c3e50", padx=10, pady=5)
        frame.pack(fill=tk.X, padx=10, pady=5)
        
        # Model path
        tk.Label(frame, text="ƒê∆∞·ªùng d·∫´n Model:", bg="white").pack(anchor=tk.W)
        model_frame = tk.Frame(frame, bg="white")
        model_frame.pack(fill=tk.X, pady=(0, 5))
        
        tk.Entry(model_frame, textvariable=self.duong_dan_model, width=20).pack(side=tk.LEFT, fill=tk.X, expand=True)
        tk.Button(model_frame, text="Ch·ªçn", command=self.chon_model, bg="#3498db", fg="white",
                 font=("Arial", 8)).pack(side=tk.RIGHT, padx=(5, 0))
        
        tk.Button(frame, text="üñºÔ∏è  D·ª± ƒëo√°n ·∫£nh", command=self.du_doan_anh,
                 bg="#e67e22", fg="white", font=("Arial", 9, "bold"), width=25).pack(pady=2)
        
        tk.Button(frame, text="üìπ D·ª± ƒëo√°n video", command=self.du_doan_video,
                 bg="#8e44ad", fg="white", font=("Arial", 9, "bold"), width=25).pack(pady=2)
                 
    def tao_log_output(self, parent):
        """T·∫°o khu v·ª±c hi·ªÉn th·ªã log"""
        log_frame = tk.LabelFrame(parent, text="üìÑ Log Output", font=("Arial", 10, "bold"),
                                 bg="white", fg="#2c3e50", padx=10, pady=5)
        log_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # Text widget with scrollbar
        self.log_text = scrolledtext.ScrolledText(log_frame, width=60, height=30, 
                                                 font=("Courier", 9), bg="#2c3e50", fg="#ecf0f1")
        self.log_text.pack(fill=tk.BOTH, expand=True, pady=5)
        
        # Buttons frame
        btn_frame = tk.Frame(log_frame, bg="white")
        btn_frame.pack(fill=tk.X, pady=(5, 0))
        
        tk.Button(btn_frame, text="üóëÔ∏è  X√≥a log", command=self.xoa_log,
                 bg="#e74c3c", fg="white", font=("Arial", 8)).pack(side=tk.LEFT)
        
        tk.Button(btn_frame, text="üíæ L∆∞u log", command=self.luu_log,
                 bg="#27ae60", fg="white", font=("Arial", 8)).pack(side=tk.LEFT, padx=(5, 0))
                 
    def redirect_stdout(self):
        """Chuy·ªÉn h∆∞·ªõng stdout ƒë·ªÉ hi·ªÉn th·ªã trong GUI"""
        class StdoutRedirector:
            def __init__(self, text_widget):
                self.text_widget = text_widget
                
            def write(self, string):
                self.text_widget.insert(tk.END, string)
                self.text_widget.see(tk.END)
                self.text_widget.update()
                
            def flush(self):
                pass
                
        sys.stdout = StdoutRedirector(self.log_text)
        
    def chon_dataset(self):
        """Ch·ªçn th∆∞ m·ª•c dataset"""
        folder = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c dataset")
        if folder:
            self.duong_dan_dataset.set(folder)
            
    def chon_model(self):
        """Ch·ªçn file model"""
        file = filedialog.askopenfilename(title="Ch·ªçn file model", 
                                         filetypes=[("Model files", "*.pt"), ("All files", "*.*")])
        if file:
            self.duong_dan_model.set(file)
            
    def khoi_tao_bo_huan_luyen(self):
        """Kh·ªüi t·∫°o b·ªô hu·∫•n luy·ªán v·ªõi dataset path m·ªõi"""
        try:
            self.bo_huan_luyen = HuanLuyenNhanDienDayAnToan(self.duong_dan_dataset.get())
            print(f"‚úì ƒê√£ kh·ªüi t·∫°o b·ªô hu·∫•n luy·ªán v·ªõi dataset: {self.duong_dan_dataset.get()}")
            return True
        except Exception as e:
            print(f"‚ùå L·ªói kh·ªüi t·∫°o b·ªô hu·∫•n luy·ªán: {e}")
            return False
            
    def tao_cau_truc_yolo(self):
        """T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c YOLO"""
        def chay():
            if not self.khoi_tao_bo_huan_luyen():
                return
            try:
                self.bo_huan_luyen.tao_cau_truc_yolo()
                print("‚úÖ Ho√†n th√†nh t·∫°o c·∫•u tr√∫c YOLO!")
            except Exception as e:
                print(f"‚ùå L·ªói t·∫°o c·∫•u tr√∫c YOLO: {e}")
                
        threading.Thread(target=chay, daemon=True).start()
        
    def xu_ly_anh_nhan(self):
        """X·ª≠ l√Ω ·∫£nh v√† nh√£n"""
        def chay():
            if not self.khoi_tao_bo_huan_luyen():
                return
            try:
                tat_ca_du_lieu = self.bo_huan_luyen.xu_ly_anh_va_nhan()
                if len(tat_ca_du_lieu) > 0:
                    self.bo_huan_luyen.chia_va_sao_chep_du_lieu(tat_ca_du_lieu)
                    print("‚úÖ Ho√†n th√†nh x·ª≠ l√Ω ·∫£nh v√† nh√£n!")
                else:
                    print("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ƒë·ªÉ x·ª≠ l√Ω!")
            except Exception as e:
                print(f"‚ùå L·ªói x·ª≠ l√Ω ·∫£nh v√† nh√£n: {e}")
                
        threading.Thread(target=chay, daemon=True).start()
    def tao_yaml(self):
        """T·∫°o file c·∫•u h√¨nh YAML"""
        def chay():
            if not self.khoi_tao_bo_huan_luyen():
                return
            try:
                self.bo_huan_luyen.tao_file_cau_hinh_yaml()
                print("‚úÖ Ho√†n th√†nh t·∫°o file YAML!")
            except Exception as e:
                print(f"‚ùå L·ªói t·∫°o file YAML: {e}")
                
        threading.Thread(target=chay, daemon=True).start()
        
    def bat_dau_huan_luyen(self):
        """B·∫Øt ƒë·∫ßu qu√° tr√¨nh hu·∫•n luy·ªán"""
        def chay():
            if not self.khoi_tao_bo_huan_luyen():
                return
            try:
                self.progress_var.set(0)
                # T·∫°o file YAML tr∆∞·ªõc khi hu·∫•n luy·ªán
                duong_dan_yaml = self.bo_huan_luyen.tao_file_cau_hinh_yaml()

                def progress_callback(line):
                    # Ghi t·ª´ng d√≤ng v√†o log_text (textbox)
                    self.root.after(0, lambda: self.log_text.insert('end', line))
                    self.root.after(0, lambda: self.log_text.see('end'))
                # G·ªçi hu·∫•n luy·ªán, truy·ªÅn callback
                self.bo_huan_luyen.huan_luyen_model(
                    duong_dan_yaml=duong_dan_yaml,
                    so_epoch=self.so_epoch.get(),
                    kich_thuoc_anh=self.kich_thuoc_anh.get(),
                    kich_thuoc_batch=self.batch_size.get(),
                    progress_callback=progress_callback
                )            
            except Exception as e:
                self.root.after(0, lambda e=e: self.log_text.insert('end', f"L·ªói: {e}\n"))
                
        threading.Thread(target=chay, daemon=True).start()
        
    def danh_gia_model(self):
        """ƒê√°nh gi√° model - Phi√™n b·∫£n ƒë√£ s·ª≠a l·ªói"""
        def chay():
            if not self.khoi_tao_bo_huan_luyen():
                return
            try:
                print("\n" + "="*50)
                print("üìä ƒê√ÅNH GI√Å MODEL")
                print("="*50)
                
                # Ki·ªÉm tra file model c√≥ t·ªìn t·∫°i kh√¥ng
                model_path = self.duong_dan_model.get()
                if not os.path.exists(model_path):
                    print(f"‚ùå Kh√¥ng t√¨m th·∫•y file model: {model_path}")
                    messagebox.showerror("L·ªói", f"Kh√¥ng t√¨m th·∫•y file model: {model_path}")
                    return
                
                from ultralytics import YOLO
                import pandas as pd
                
                # Load model
                print(f"üîÑ ƒêang t·∫£i model: {model_path}")
                model = YOLO(model_path)
                
                # Ki·ªÉm tra file dataset YAML
                yaml_path = "modelantoan\cau_hinh_day_an_toan.yaml"
                if not os.path.exists(yaml_path):
                    print(f"‚ùå Kh√¥ng t√¨m th·∫•y file c·∫•u h√¨nh: {yaml_path}")
                    print("‚ö†Ô∏è Vui l√≤ng t·∫°o file YAML tr∆∞·ªõc khi ƒë√°nh gi√°!")
                    messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y file c·∫•u h√¨nh data.yaml!\nVui l√≤ng t·∫°o file YAML tr∆∞·ªõc.")
                    return
                
                # ƒê√°nh gi√° tr√™n t·∫≠p validation
                print("\nüîÑ ƒêang ƒë√°nh gi√° model tr√™n t·∫≠p validation...")
                results = model.val(data=yaml_path, verbose=True)
                
                # Ki·ªÉm tra k·∫øt qu·∫£ c√≥ h·ª£p l·ªá kh√¥ng
                if not hasattr(results, 'results_dict') or not results.results_dict:
                    print("‚ùå Kh√¥ng c√≥ k·∫øt qu·∫£ ƒë√°nh gi√°!")
                    messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ ƒë√°nh gi√° model. Ki·ªÉm tra l·∫°i dataset v√† model.")
                    return
                
                # L·∫•y metrics an to√†n
                results_dict = results.results_dict
                
                # T·∫°o b·∫£ng k·∫øt qu·∫£
                try:
                    # L·∫•y gi√° tr·ªã metrics m·ªôt c√°ch an to√†n
                    precision = results_dict.get('metrics/precision(B)', [0.0])
                    recall = results_dict.get('metrics/recall(B)', [0.0])
                    map50 = results_dict.get('metrics/mAP50(B)', 0.0)
                    map50_95 = results_dict.get('metrics/mAP50-95(B)', 0.0)
                    
                    # ƒê·∫£m b·∫£o precision v√† recall l√† list
                    if not isinstance(precision, list):
                        precision = [precision]
                    if not isinstance(recall, list):
                        recall = [recall]
                    
                    # T√≠nh F1-score
                    f1_scores = []
                    for p, r in zip(precision, recall):
                        if p + r > 0:
                            f1_scores.append(2 * p * r / (p + r))
                        else:
                            f1_scores.append(0.0)
                    
                    # In k·∫øt qu·∫£ t·ªïng quan
                    print("\nüìä K·∫æT QU√Å ƒê√ÅNH GI√Å T·ªîNG QUAN:")
                    print("‚îÄ"*50)
                    print(f"mAP@50      : {map50:.3f}")
                    print(f"mAP@50-95   : {map50_95:.3f}")
                    print(f"Precision   : {precision[0]:.3f}" if precision else "Precision   : N/A")
                    print(f"Recall      : {recall[0]:.3f}" if recall else "Recall      : N/A")
                    print(f"F1-score    : {f1_scores[0]:.3f}" if f1_scores else "F1-score    : N/A")
                    print("‚îÄ"*50)
                    
                    # Th√¥ng tin t·ªëc ƒë·ªô
                    if hasattr(results, 'speed') and results.speed:
                        speeds = results.speed
                        print(f"\n‚ö° T·ªêC ƒê·ªò X·ª¨ L√ù:")
                        print(f"- Ti·ªÅn x·ª≠ l√Ω  : {speeds.get('preprocess', 0):.1f}ms")
                        print(f"- Suy lu·∫≠n    : {speeds.get('inference', 0):.1f}ms") 
                        print(f"- H·∫≠u x·ª≠ l√Ω   : {speeds.get('postprocess', 0):.1f}ms")
                    
                    print("\n‚úÖ Ho√†n th√†nh ƒë√°nh gi√° model!")
                    
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£ trong message box
                    messagebox.showinfo("K·∫øt qu·∫£ ƒê√°nh gi√°", 
                        f"üìä K·∫æT QU·∫¢ ƒê√ÅNH GI√Å MODEL:\n\n"
                        f"mAP@50: {map50:.3f}\n"
                        f"mAP@50-95: {map50_95:.3f}\n"
                        f"Precision: {precision[0]:.3f}\n"
                        f"Recall: {recall[0]:.3f}\n"
                        f"F1-score: {f1_scores[0]:.3f}\n\n"
                        f"‚ö° T·ªëc ƒë·ªô suy lu·∫≠n: {speeds.get('inference', 0):.1f}ms/·∫£nh"
                        if hasattr(results, 'speed') and results.speed else "")
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è L·ªói x·ª≠ l√Ω k·∫øt qu·∫£: {e}")
                    print("üìä K·∫øt qu·∫£ c∆° b·∫£n:")
                    print(f"- Model ƒë√£ ƒë∆∞·ª£c ƒë√°nh gi√° th√†nh c√¥ng")
                    print(f"- Chi ti·∫øt: {results_dict}")
                    
                    messagebox.showinfo("K·∫øt qu·∫£ ƒê√°nh gi√°", 
                        "Model ƒë√£ ƒë∆∞·ª£c ƒë√°nh gi√° th√†nh c√¥ng!\n"
                        "Xem chi ti·∫øt trong log output.")
                    
            except ImportError as e:
                error_msg = f"‚ùå L·ªói import th∆∞ vi·ªán: {e}\nVui l√≤ng c√†i ƒë·∫∑t: pip install ultralytics pandas"
                print(error_msg)
                messagebox.showerror("L·ªói Import", error_msg)
                
            except FileNotFoundError as e:
                error_msg = f"‚ùå Kh√¥ng t√¨m th·∫•y file: {e}"
                print(error_msg)
                messagebox.showerror("L·ªói File", error_msg)
                
            except Exception as e:
                error_msg = f"‚ùå L·ªói ƒë√°nh gi√° model: {e}"
                print(error_msg)
                print(f"üìù Chi ti·∫øt l·ªói: {type(e).__name__}")
                messagebox.showerror("L·ªói", error_msg)
                
        threading.Thread(target=chay, daemon=True).start()


    def du_doan_anh(self):
        """D·ª± ƒëo√°n tr√™n ·∫£nh"""
        file_anh = filedialog.askopenfilename(
            title="Ch·ªçn ·∫£nh ƒë·ªÉ d·ª± ƒëo√°n",
            filetypes=[("Image files", "*.jpg *.jpeg *.png *.bmp *.tiff"), ("All files", "*.*")]
        )
        
        if not file_anh:
            return
            
        def chay():
            if not self.khoi_tao_bo_huan_luyen():
                return
            try:
                print(f"üîç ƒêang d·ª± ƒëo√°n ·∫£nh: {file_anh}")
                ket_qua = self.bo_huan_luyen.du_doan_mau(file_anh, self.duong_dan_model.get())
                if ket_qua:
                    print("‚úÖ Ho√†n th√†nh d·ª± ƒëo√°n!")
                else:
                    print("‚ùå D·ª± ƒëo√°n th·∫•t b·∫°i!")
            except Exception as e:
                print(f"‚ùå L·ªói d·ª± ƒëo√°n: {e}")
                
        threading.Thread(target=chay, daemon=True).start()
        
    def du_doan_video(self):
        """D·ª± ƒëo√°n tr√™n video"""
        file_video = filedialog.askopenfilename(
            title="Ch·ªçn video ƒë·ªÉ d·ª± ƒëo√°n",
            filetypes=[("Video files", "*.mp4 *.avi *.mov *.mkv"), ("All files", "*.*")]
        )
        
        if not file_video:
            return
            
        def chay():
            try:
                from ultralytics import YOLO
                print(f"üé• ƒêang d·ª± ƒëo√°n video: {file_video}")
                
                model = YOLO(self.duong_dan_model.get())
                ket_qua = model(file_video, save=True)
                
                print("‚úÖ Ho√†n th√†nh d·ª± ƒëo√°n video!")
                print("üìÅ K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c runs/detect/")
                
            except Exception as e:
                print(f"‚ùå L·ªói d·ª± ƒëo√°n video: {e}")
                
        threading.Thread(target=chay, daemon=True).start()
        
    def xem_bieu_do(self):
        """Xem bi·ªÉu ƒë·ªì hu·∫•n luy·ªán"""
        try:
            import matplotlib.pyplot as plt
            from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
            
            # T·∫°o c·ª≠a s·ªï m·ªõi ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
            bieu_do_window = tk.Toplevel(self.root)
            bieu_do_window.title("Bi·ªÉu ƒë·ªì Hu·∫•n luy·ªán")
            bieu_do_window.geometry("800x600")
            
            # Ki·ªÉm tra c√°c file bi·ªÉu ƒë·ªì c√≥ t·ªìn t·∫°i
            files_bieu_do = [
                "modelantoan/yolo_loss.png",
                "modelantoan/yolo_map.png", 
                "modelantoan/yolo_precision_recall.png"
            ]
            
            found_plots = []
            for file_path in files_bieu_do:
                if os.path.exists(file_path):
                    found_plots.append(file_path)
                    
            if not found_plots:
                tk.Label(bieu_do_window, text="Kh√¥ng t√¨m th·∫•y bi·ªÉu ƒë·ªì!\nVui l√≤ng hu·∫•n luy·ªán model tr∆∞·ªõc.",
                        font=("Arial", 12)).pack(expand=True)
                return
                
            # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
            notebook = ttk.Notebook(bieu_do_window)
            notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
            
            for plot_file in found_plots:
                frame = ttk.Frame(notebook)
                plot_name = os.path.basename(plot_file).replace("yolo_", "").replace(".png", "").title()
                notebook.add(frame, text=plot_name)
                
                try:
                    img = Image.open(plot_file)
                    img = img.resize((750, 500), Image.Resampling.LANCZOS)
                    photo = ImageTk.PhotoImage(img)
                    
                    label = tk.Label(frame, image=photo)
                    label.image = photo # Gi·ªØ reference
                    label.pack(expand=True)
                    
                except Exception as e:
                    tk.Label(frame, text=f"L·ªói hi·ªÉn th·ªã bi·ªÉu ƒë·ªì: {e}").pack(expand=True)
                    
        except Exception as e:
            print(f"‚ùå L·ªói xem bi·ªÉu ƒë·ªì: {e}")
            messagebox.showerror("L·ªói", f"L·ªói xem bi·ªÉu ƒë·ªì: {e}")
    def train_yolo(self, train_args, progress_callback=None):
        """Ch·∫°y hu·∫•n luy·ªán YOLO v·ªõi subprocess v√† g·ª≠i output v·ªÅ callback"""
        process = subprocess.Popen(
            train_args,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            universal_newlines=True,
            bufsize=1
        )
        
        for line in process.stdout:
            # G·ª≠i t·ª´ng d√≤ng v·ªÅ callback
            if progress_callback:
                progress_callback(line)
                
        process.wait()

    def xoa_log(self):
        """X√≥a n·ªôi dung log"""
        self.log_text.delete(1.0, tk.END)
        
    def luu_log(self):
        """L∆∞u log ra file"""
        file_path = filedialog.asksaveasfilename(
            title="L∆∞u log",
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        
        if file_path:
            try:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(self.log_text.get(1.0, tk.END))
                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ l∆∞u log v√†o {file_path}")
            except Exception as e:
                messagebox.showerror("L·ªói", f"L·ªói l∆∞u log: {e}")    
    def cap_nhat_tien_trinh(self, epoch, metrics, progress_str):
        """C·∫≠p nh·∫≠t ti·∫øn tr√¨nh hu·∫•n luy·ªán tr√™n giao di·ªán"""
        try:
            # Update progress bar and force GUI update
            self.progress_var.set(float(progress_str.split('%')[0]))
            self.root.update_idletasks()
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói c·∫≠p nh·∫≠t ti·∫øn tr√¨nh: {e}")

def main():
    """H√†m main ch·∫°y ·ª©ng d·ª•ng"""
    root = tk.Tk()
    app = GiaoDienHuanLuyen(root)
    
    # X·ª≠ l√Ω khi ƒë√≥ng c·ª≠a s·ªï
    def on_closing():
        if messagebox.askokcancel("Tho√°t", "B·∫°n c√≥ mu·ªën tho√°t ·ª©ng d·ª•ng?"):
            root.destroy()
            
    root.protocol("WM_DELETE_WINDOW", on_closing)
    root.mainloop()

if __name__ == "__main__":
    main()
