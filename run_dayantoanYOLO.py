import cv2
import numpy as np
from ultralytics import YOLO
import time
from pathlib import Path
import threading
import queue
from collections import defaultdict
import pygame

class WebcamNhanDienDayAnToan:
    def __init__(self, duong_dan_model="modelantoan/best.pt"):
        """
        Kh·ªüi t·∫°o webcam nh·∫≠n di·ªán d√¢y an to√†n
        
        Args:
            duong_dan_model: ƒê∆∞·ªùng d·∫´n t·ªõi model ƒë√£ hu·∫•n luy·ªán
        """
        self.duong_dan_model = duong_dan_model
        self.model = None
        self.cap = None
        self.dang_chay = False
        
        # C·∫•u h√¨nh hi·ªÉn th·ªã - ch·ªâ 2 lo·∫°i
        self.ten_cac_lop = ['C√≥ d√¢y an to√†n', 'Kh√¥ng d√¢y an to√†n']
        self.mau_sac_lop = {
            0: (0, 255, 0),    # Xanh l√° - c√≥ d√¢y an to√†n
            1: (0, 0, 255),    # ƒê·ªè - kh√¥ng c√≥ d√¢y an to√†n  
        }
        
        # Tr·∫°ng th√°i hi·ªán t·∫°i - ch·ªâ 3 tr·∫°ng th√°i ƒë∆°n gi·∫£n
        self.trang_thai_hien_tai = "Kh√¥ng ph√°t hi·ªán"
        self.mau_trang_thai = (128, 128, 128)  # X√°m - kh√¥ng ph√°t hi·ªán
        self.thoi_gian_cap_nhat_trang_thai = time.time()
        self.do_tin_cay_cao_nhat = 0.0
        
        # C·∫£nh b√°o √¢m thanh - ch·ªâ khi kh√¥ng ƒëeo d√¢y an to√†n
        self.am_thanh_canh_bao = True
        self.lan_canh_bao_cuoi = 0
        self.khoang_cach_canh_bao = 2  # 2 gi√¢y gi·ªØa c√°c l·∫ßn c·∫£nh b√°o
        
        # FPS tracking ƒë∆°n gi·∫£n
        self.fps_hien_tai = 0
        self.thoi_gian_frame_truoc = time.time()
        
        # Kh·ªüi t·∫°o pygame cho √¢m thanh
        try:
            pygame.mixer.init()
            self.co_am_thanh = True
        except:
            self.co_am_thanh = False
            print("‚ö†Ô∏è Kh√¥ng th·ªÉ kh·ªüi t·∫°o √¢m thanh")
    
    def safe_print(self, *args, **kwargs):
        try:
            print(*args, **kwargs)
        except Exception:
            pass
    
    def khoi_tao_model(self):
        """Kh·ªüi t·∫°o model YOLO"""
        try:
            if not Path(self.duong_dan_model).exists():
                self.safe_print(f"‚ùå Kh√¥ng t√¨m th·∫•y model t·∫°i: {self.duong_dan_model}")
                return False
                
            self.safe_print(f"üîß ƒêang t·∫£i model t·ª´ {self.duong_dan_model}...")
            self.model = YOLO(self.duong_dan_model)
            self.safe_print("‚úÖ Model ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!")
            
            # Warmup model
            self.safe_print("üî• ƒêang warmup model...")
            dummy_img = np.zeros((640, 640, 3), dtype=np.uint8)
            _ = self.model(dummy_img, verbose=False)
            self.safe_print("‚úÖ Warmup ho√†n th√†nh!")
            
            return True
            
        except Exception as e:
            self.safe_print(f"‚ùå L·ªói khi t·∫£i model: {e}")
            return False
    
    def khoi_tao_camera(self, camera_id=0):
        """Kh·ªüi t·∫°o camera"""
        try:
            self.safe_print(f"üì∑ ƒêang kh·ªüi t·∫°o camera {camera_id}...")
            self.cap = cv2.VideoCapture(camera_id)
            
            if not self.cap.isOpened():
                self.safe_print(f"‚ùå Kh√¥ng th·ªÉ m·ªü camera {camera_id}")
                return False
            
            # C·∫•u h√¨nh camera ƒë∆°n gi·∫£n
            self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
            self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
            self.cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)
            
            self.safe_print(f"‚úÖ Camera kh·ªüi t·∫°o th√†nh c√¥ng!")
            
            return True
            
        except Exception as e:
            self.safe_print(f"‚ùå L·ªói kh·ªüi t·∫°o camera: {e}")
            return False
    
    def tinh_fps(self):
        """T√≠nh FPS ƒë∆°n gi·∫£n"""
        current_time = time.time()
        time_diff = current_time - self.thoi_gian_frame_truoc
        if time_diff > 0:
            self.fps_hien_tai = 1.0 / time_diff
        self.thoi_gian_frame_truoc = current_time
    
    def phat_am_thanh_canh_bao(self):
        """ƒê√£ lo·∫°i b·ªè ph√°t √¢m thanh ·ªü ƒë√¢y, x·ª≠ l√Ω ·ªü giao di·ªán."""
        pass

    def cap_nhat_trang_thai_tong_quan(self, co_phat_hien, lop_tin_cay_nhat, confidence_cao_nhat):
        """Ch·ªâ 2 tr·∫°ng th√°i: c√≥ ho·∫∑c kh√¥ng c√≥ d√¢y an to√†n"""
        if lop_tin_cay_nhat == 0:  # C√≥ d√¢y an to√†n
            self.trang_thai_hien_tai = "‚úÖ ƒêANG ƒêEO D√ÇY AN TO√ÄN"
            self.mau_trang_thai = (0, 255, 0)  # Xanh l√°
        else:  # Kh√¥ng c√≥ d√¢y an to√†n ho·∫∑c kh√¥ng ph√°t hi·ªán g√¨
            self.trang_thai_hien_tai = "‚ùå KH√îNG ƒêEO D√ÇY AN TO√ÄN"
            self.mau_trang_thai = (0, 0, 255)  # ƒê·ªè
        self.do_tin_cay_cao_nhat = confidence_cao_nhat
        self.thoi_gian_cap_nhat_trang_thai = time.time()
    
    def ve_ket_qua(self, frame, ket_qua):
        """V·∫Ω k·∫øt qu·∫£ nh·∫≠n di·ªán l√™n frame (b·ªè v·∫Ω bounding box, kh√¥ng c·∫≠p nh·∫≠t th·ªëng k√™ s·ªë l·∫ßn c√≥/kh√¥ng d√¢y an to√†n)"""
        frame_hien_thi = frame.copy()
        co_khong_day_an_toan = False
        co_phat_hien = False
        confidence_cao_nhat = 0.0
        lop_tin_cay_nhat = None
        
        if ket_qua and len(ket_qua) > 0:
            for r in ket_qua:
                boxes = r.boxes
                if boxes is not None:
                    for box in boxes:
                        conf = float(box.conf[0])
                        cls = int(box.cls[0])
                        if conf < 0.:
                            continue
                        co_phat_hien = True
                        if conf > confidence_cao_nhat:
                            confidence_cao_nhat = conf
                            lop_tin_cay_nhat = cls
                        if cls == 1:
                            co_khong_day_an_toan = True
        
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i t·ªïng quan d·ª±a tr√™n detection c√≥ confidence cao nh·∫•t
        self.cap_nhat_trang_thai_tong_quan(co_phat_hien, lop_tin_cay_nhat, confidence_cao_nhat)
        
        # Kh√¥ng ph√°t c·∫£nh b√°o √¢m thanh ·ªü ƒë√¢y n·ªØa
        
        return frame_hien_thi, co_khong_day_an_toan
    
    def ve_thong_tin_overlay(self, frame, co_canh_bao=False):
        """V·∫Ω th√¥ng tin overlay ƒë∆°n gi·∫£n (b·ªè th·ªëng k√™ nh·∫≠t k√≠)"""
        height, width = frame.shape[:2]
        
        # === TR·∫†NG TH√ÅI T·ªîNG QUAN (TO, N·ªîI B·∫¨T) ===
        status_text = self.trang_thai_hien_tai
        confidence_text = f"({self.do_tin_cay_cao_nhat:.2f})" if self.do_tin_cay_cao_nhat > 0 else ""
        full_status = f"{status_text} {confidence_text}"
        
        # T√≠nh k√≠ch th∆∞·ªõc text ƒë·ªÉ cƒÉn gi·ªØa
        font_scale = 1.0
        thickness = 2
        (status_width, status_height), _ = cv2.getTextSize(
            full_status, cv2.FONT_HERSHEY_SIMPLEX, font_scale, thickness
        )
        
        # V·ªã tr√≠ cƒÉn gi·ªØa ph√≠a tr√™n
        status_x = (width - status_width) // 2
        status_y = 40
        
        # V·∫Ω n·ªÅn cho tr·∫°ng th√°i
        padding = 10
        cv2.rectangle(frame, 
                     (status_x - padding, status_y - status_height - padding),
                     (status_x + status_width + padding, status_y + padding),
                     (0, 0, 0), -1)
        
        # V·∫Ω vi·ªÅn m√†u theo tr·∫°ng th√°i
        cv2.rectangle(frame,
                     (status_x - padding, status_y - status_height - padding),
                     (status_x + status_width + padding, status_y + padding),
                     self.mau_trang_thai, 2)
        
        # V·∫Ω text tr·∫°ng th√°i
        cv2.putText(frame, full_status, (status_x, status_y),
                   cv2.FONT_HERSHEY_SIMPLEX, font_scale, self.mau_trang_thai, thickness)
        
        # === C·∫¢NH B√ÅO ƒê∆†N GI·∫¢N ===
        if co_canh_bao:
            canh_bao_text = "CANH BAO: KHONG DEO DAY AN TOAN!"
            canh_bao_font = 0.7
            canh_bao_thickness = 2
            
            (canh_bao_width, canh_bao_height), _ = cv2.getTextSize(
                canh_bao_text, cv2.FONT_HERSHEY_SIMPLEX, canh_bao_font, canh_bao_thickness
            )
            
            canh_bao_x = (width - canh_bao_width) // 2
            canh_bao_y = height - 80
            
            # N·ªÅn ƒë·ªè nh·∫•p nh√°y
            if int(time.time() * 3) % 2:  # Nh·∫•p nh√°y nhanh h∆°n
                cv2.rectangle(frame, 
                             (canh_bao_x - 5, canh_bao_y - canh_bao_height - 5),
                             (canh_bao_x + canh_bao_width + 5, canh_bao_y + 5),
                             (0, 0, 255), -1)
                text_color = (255, 255, 255)
            else:
                text_color = (0, 0, 255)
            
            cv2.putText(frame, canh_bao_text, (canh_bao_x, canh_bao_y),
                       cv2.FONT_HERSHEY_SIMPLEX, canh_bao_font, text_color, canh_bao_thickness)
        
        # === H∆Ø·ªöNG D·∫™N ƒê∆†N GI·∫¢N (G√ìC PH·∫¢I) ===
        huong_dan = [
            "Q: Thoat",
            "S: Luu anh", 
            "R: Reset",
        ]
        
        for i, text in enumerate(huong_dan):
            cv2.putText(frame, text, (width - 120, height - 70 + i*20),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.4, (255, 255, 255), 1)
        
        return frame
    
    def luu_anh_screenshot(self, frame):
        """L∆∞u ·∫£nh screenshot"""
        try:
            thu_muc_screenshot = Path("screenshots")
            thu_muc_screenshot.mkdir(exist_ok=True)
            
            timestamp = time.strftime("%Y%m%d_%H%M%S")
            ten_file = f"seatbelt_detection_{timestamp}.jpg"
            duong_dan = thu_muc_screenshot / ten_file
            
            cv2.imwrite(str(duong_dan), frame)
            self.safe_print(f"üì∏ ƒê√£ l∆∞u ·∫£nh: {duong_dan}")
        except Exception as e:
            self.safe_print(f"‚ùå L·ªói l∆∞u ·∫£nh: {e}")
    
    def chay_nhan_dien(self, camera_id=0):
        """Ch·∫°y nh·∫≠n di·ªán realtime"""
        
        # Kh·ªüi t·∫°o model v√† camera
        if not self.khoi_tao_model():
            return False
            
        if not self.khoi_tao_camera(camera_id):
            return False
        
        self.safe_print("\nüöÄ B·∫Øt ƒë·∫ßu nh·∫≠n di·ªán realtime...")
        self.safe_print("üìã H∆∞·ªõng d·∫´n ƒëi·ªÅu khi·ªÉn:")
        self.safe_print("   Q: Tho√°t")
        self.safe_print("   S: L∆∞u ·∫£nh screenshot")
        self.safe_print("   R: Reset th·ªëng k√™")
        self.safe_print("\n‚ú® Nh·∫•n Q ƒë·ªÉ d·ª´ng...\n")
        
        self.dang_chay = True
        
        try:
            while self.dang_chay:
                ret, frame = self.cap.read()
                if not ret:
                    self.safe_print("‚ùå Kh√¥ng th·ªÉ ƒë·ªçc frame t·ª´ camera")
                    break
                
                # T√≠nh FPS
                self.tinh_fps()
                
                # Nh·∫≠n di·ªán
                ket_qua = self.model(frame, verbose=False)
                
                # V·∫Ω k·∫øt qu·∫£
                frame_hien_thi, co_canh_bao = self.ve_ket_qua(frame, ket_qua)
                
                # V·∫Ω th√¥ng tin overlay
                frame_cuoi_cung = self.ve_thong_tin_overlay(frame_hien_thi, co_canh_bao)
                
                # Hi·ªÉn th·ªã
                cv2.imshow('Nhan Dien Day An Toan', frame_cuoi_cung)
                
                # X·ª≠ l√Ω ph√≠m
                key = cv2.waitKey(1) & 0xFF
                
                if key == ord('q'):  # Q
                    break
                elif key == ord('s'):  # S - Screenshot
                    self.luu_anh_screenshot(frame_cuoi_cung)
                elif key == ord('r'):  # R - Reset th·ªëng k√™
                    self.so_lan_co_day = 0
                    self.so_lan_khong_day = 0
                    self.trang_thai_hien_tai = "Kh√¥ng ph√°t hi·ªán"
                    self.mau_trang_thai = (128, 128, 128)
                    self.do_tin_cay_cao_nhat = 0.0
                    self.safe_print("üîÑ ƒê√£ reset th·ªëng k√™")
        except KeyboardInterrupt:
            self.safe_print("\n‚ö†Ô∏è ƒê√£ d·ª´ng b·∫±ng Ctrl+C")
        except Exception as e:
            self.safe_print(f"‚ùå L·ªói trong qu√° tr√¨nh ch·∫°y: {e}")
        finally:
            self.dong_ung_dung()
    
    def dong_ung_dung(self):
        """ƒê√≥ng ·ª©ng d·ª•ng v√† gi·∫£i ph√≥ng t√†i nguy√™n (b·ªè in th·ªëng k√™ nh·∫≠t k√≠)"""
        self.dang_chay = False
        
        if self.cap:
            self.cap.release()
        
        cv2.destroyAllWindows()
        
        self.safe_print("\nüëã ƒê√£ ƒë√≥ng ·ª©ng d·ª•ng!")
    
    def nhan_dien_day_an_toan(self, frame):
        """Nh·∫≠n di·ªán d√¢y an to√†n tr√™n frame, tr·∫£ v·ªÅ (c√≥_d√¢y, ƒë·ªô_tin_c·∫≠y)"""
        if self.model is None:
            self.khoi_tao_model()
        try:
            results = self.model(frame, verbose=False)
            co_day = True
            conf = 0.0
            if results and len(results) > 0:
                for r in results:
                    boxes = r.boxes
                    if boxes is not None:
                        for box in boxes:
                            conf_box = float(box.conf[0])
                            cls = int(box.cls[0])
                            if conf_box > conf:
                                conf = conf_box
                                co_day = (cls == 0)  # 0: c√≥ d√¢y, 1: kh√¥ng d√¢y
            return co_day, conf
        except Exception as e:
            self.safe_print(f"L·ªói nh·∫≠n di·ªán d√¢y an to√†n: {e}")
            return True, 0.0

def main():
    try:
        print("=== WEBCAM NH·∫¨N DI·ªÜN D√ÇY AN TO√ÄN ===")
        print("S·ª≠ d·ª•ng YOLOv8n ƒë√£ hu·∫•n luy·ªán\n")
    except Exception:
        pass
    duong_dan_model = "modelantoan/best.pt"
    if not Path(duong_dan_model).exists():
        try:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y model t·∫°i: {duong_dan_model}")
            print("üí° Vui l√≤ng ch·∫°y hu·∫•n luy·ªán tr∆∞·ªõc ho·∫∑c ki·ªÉm tra ƒë∆∞·ªùng d·∫´n model")
        except Exception:
            pass
        return
    detector = WebcamNhanDienDayAnToan(duong_dan_model)
    camera_id = 0
    detector.chay_nhan_dien(camera_id)

if __name__ == "__main__":
    main()