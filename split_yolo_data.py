import os
import random
import shutil
import cv2
import numpy as np
from pathlib import Path
import yaml
from tqdm import tqdm  # Th√™m progress bar

# C·∫•u h√¨nh 
class_info = {
    'no_phone': {'id': 0, 'name': 'KH√îNG D√ôNG ƒêI·ªÜN THO·∫†I'},
    'using_phone': {'id': 1, 'name': 'ƒêANG D√ôNG ƒêI·ªÜN THO·∫†I'}
}

# Th∆∞ m·ª•c d·ªØ li·ªáu
data_root = Path('data')
TRAIN_IMG_DIR = data_root / 'train' / 'images'
VAL_IMG_DIR = data_root / 'val' / 'images' 
TRAIN_LABEL_DIR = data_root / 'train' / 'labels'
VAL_LABEL_DIR = data_root / 'val' / 'labels'

# C·∫•u h√¨nh chia d·ªØ li·ªáu
SPLIT_RATIO = 0.8  # 80% train, 20% val
MIN_IMAGES_PER_CLASS = 100  # S·ªë ·∫£nh t·ªëi thi·ªÉu m·ªói class
MAX_IMAGES_PER_CLASS = 3000  # S·ªë ·∫£nh t·ªëi ƒëa m·ªói class 
TARGET_SIZE = (640, 640)  # K√≠ch th∆∞·ªõc ·∫£nh cho YOLOv8
IMG_EXTS = ('.jpg', '.jpeg', '.png')

def ensure_dir(path):
    """T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i"""
    path = Path(path)
    if not path.exists():
        path.mkdir(parents=True, exist_ok=True)
        print(f"üìÅ ƒê√£ t·∫°o th∆∞ m·ª•c: {path}")

def create_label(class_id, img_path, output_path):
    """
    T·∫°o file label YOLO format:
    <class_id> <center_x> <center_y> <width> <height>
    C√°c gi√° tr·ªã ƒë∆∞·ª£c normalize v·ªÅ [0,1]
    """
    try:
        # ƒê·ªçc k√≠ch th∆∞·ªõc ·∫£nh
        img = cv2.imread(str(img_path))
        if img is None:
            return False
            
        h, w = img.shape[:2]
        
        # T·∫°o bounding box ·ªü gi·ªØa ·∫£nh (chi·∫øm 80% ·∫£nh)
        box_w = w * 0.8
        box_h = h * 0.8
        center_x = w / 2
        center_y = h / 2
        
        # Normalize c√°c gi√° tr·ªã v·ªÅ [0,1]
        norm_center_x = center_x / w
        norm_center_y = center_y / h
        norm_width = box_w / w
        norm_height = box_h / h
        
        # Ghi label theo format YOLO
        with open(output_path, 'w') as f:
            f.write(f"{class_id} {norm_center_x:.6f} {norm_center_y:.6f} {norm_width:.6f} {norm_height:.6f}")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói t·∫°o label cho {img_path}: {e}")
        return False

def process_image(src_path, dst_path):
    """X·ª≠ l√Ω ·∫£nh: resize v·ªÅ k√≠ch th∆∞·ªõc chu·∫©n"""
    try:
        img = cv2.imread(str(src_path))
        if img is None:
            return False
        
        # Resize gi·ªØ nguy√™n t·ªâ l·ªá
        h, w = img.shape[:2]
        scale = min(TARGET_SIZE[0]/w, TARGET_SIZE[1]/h)
        new_w = int(w * scale)
        new_h = int(h * scale)
        
        resized = cv2.resize(img, (new_w, new_h))
        
        # T·∫°o ·∫£nh n·ªÅn ƒëen k√≠ch th∆∞·ªõc chu·∫©n
        canvas = np.zeros((TARGET_SIZE[1], TARGET_SIZE[0], 3), dtype=np.uint8)
        
        # Paste ·∫£nh v√†o gi·ªØa
        x_offset = (TARGET_SIZE[0] - new_w) // 2
        y_offset = (TARGET_SIZE[1] - new_h) // 2
        canvas[y_offset:y_offset+new_h, x_offset:x_offset+new_w] = resized
        
        # L∆∞u ·∫£nh v·ªõi ch·∫•t l∆∞·ª£ng cao
        cv2.imwrite(str(dst_path), canvas, [cv2.IMWRITE_JPEG_QUALITY, 100])
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói x·ª≠ l√Ω ·∫£nh {src_path}: {e}")
        return False

def split_dataset():
    """Chia dataset v√† t·∫°o label cho YOLOv8"""
    print("\n=== CHIA D·ªÆ LI·ªÜU CHO YOLOV8 TRAINING ===\n")
    
    # T·∫°o th∆∞ m·ª•c
    for d in [TRAIN_IMG_DIR, VAL_IMG_DIR, TRAIN_LABEL_DIR, VAL_LABEL_DIR]:
        ensure_dir(d)
    
    # Th·ªëng k√™ v√† chia d·ªØ li·ªáu
    stats = {'train': {}, 'val': {}}
    
    for class_name, info in class_info.items():
        src_dir = data_root / class_name
        if not src_dir.exists():
            print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c {src_dir}")
            continue
            
        # L·∫•y danh s√°ch ·∫£nh
        files = [f for f in os.listdir(src_dir) if f.lower().endswith(IMG_EXTS)]
        random.shuffle(files)  # X√°o tr·ªôn ng·∫´u nhi√™n
        
        # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng ·∫£nh
        total = len(files)
        if total < MIN_IMAGES_PER_CLASS:
            print(f"‚ö†Ô∏è Class {info['name']} c√≥ qu√° √≠t ·∫£nh ({total} < {MIN_IMAGES_PER_CLASS})")
            continue
        if total > MAX_IMAGES_PER_CLASS:
            print(f"‚ÑπÔ∏è Gi·ªõi h·∫°n s·ªë ·∫£nh c·ªßa {info['name']} xu·ªëng {MAX_IMAGES_PER_CLASS}")
            files = files[:MAX_IMAGES_PER_CLASS]
            total = MAX_IMAGES_PER_CLASS
            
        # Chia train/val
        n_train = int(total * SPLIT_RATIO)
        
        print(f"\nüìä X·ª≠ l√Ω {info['name']}:")
        print(f"   - T·ªïng s·ªë ·∫£nh: {total}")
        print(f"   - Train: {n_train}")
        print(f"   - Val: {total - n_train}")
        
        # Copy v√† x·ª≠ l√Ω ·∫£nh, t·∫°o label v·ªõi progress bar
        failed = 0
        pbar = tqdm(files, desc=f"X·ª≠ l√Ω {info['name']}")
        for i, fname in enumerate(pbar):
            src_path = src_dir / fname
            
            if i < n_train:
                # Train set
                img_dst = TRAIN_IMG_DIR / fname
                label_dst = TRAIN_LABEL_DIR / (Path(fname).stem + '.txt')
                is_train = True
            else:
                # Validation set
                img_dst = VAL_IMG_DIR / fname
                label_dst = VAL_LABEL_DIR / (Path(fname).stem + '.txt')
                is_train = False
                
            # X·ª≠ l√Ω v√† copy ·∫£nh
            if process_image(src_path, img_dst):
                # T·∫°o label
                if create_label(info['id'], img_dst, label_dst):
                    split = 'train' if is_train else 'val'
                    stats[split][class_name] = stats[split].get(class_name, 0) + 1
                else:
                    failed += 1
                    if os.path.exists(img_dst):
                        os.remove(img_dst)
            else:
                failed += 1
                
        if failed > 0:
            print(f"‚ö†Ô∏è C√≥ {failed} ·∫£nh b·ªã l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω")
    
    # In th·ªëng k√™ cu·ªëi c√πng
    print("\n=== TH·ªêNG K√ä SAU KHI CHIA ===")
    for split in ['train', 'val']:
        total = sum(stats[split].values())
        if total == 0:
            continue
        print(f"\n{split.upper()}:")
        for class_name, count in stats[split].items():
            print(f"   - {class_info[class_name]['name']}: {count} ({count/total*100:.1f}%)")
        print(f"   - T·ªïng: {total}")

if __name__ == '__main__':
    try:
        split_dataset()
        print("\n‚úÖ Ho√†n th√†nh chia d·ªØ li·ªáu cho YOLOv8!")
        
        # T·∫°o file dataset.yaml
        yaml_content = {
            'path': str(data_root.absolute()),
            'train': 'train/images',
            'val': 'val/images',
            'names': {0: 'no_phone', 1: 'using_phone'}
        }
        
        with open(data_root / 'dataset.yaml', 'w') as f:
            import yaml
            yaml.dump(yaml_content, f, sort_keys=False)
        print("‚úÖ ƒê√£ t·∫°o file dataset.yaml!")
        
    except Exception as e:
        print(f"\n‚ùå L·ªói: {str(e)}")