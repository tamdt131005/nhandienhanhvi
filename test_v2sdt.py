import cv2
import os
import time
import numpy as np
from datetime import datetime
import json
import tkinter as tk
from tkinter import messagebox, ttk
from PIL import Image, ImageTk
import threading
import shutil
import yaml
from pathlib import Path
from tqdm import tqdm  # Progress bar for data splitting

class ModernDataCollectionGUI:
    def __init__(self, root=None):
        """Kh·ªüi t·∫°o GUI thu th·∫≠p d·ªØ li·ªáu"""
        if root is None:
            self.root = tk.Tk()
        else:
            self.root = root
        self.setup_window()
        
        # Camera variables
        self.camera = None
        self.is_running = False
        self.current_frame = None
        self.capture_thread = None
        
        # Data collection variables
        self.current_class = None
        self.is_auto_recording = False
        self.image_count = {"no_phone": 0, "using_phone": 0}
        self.session_stats = {
            "start_time": None,
            "total_images": 0,
            "images_per_class": {"no_phone": 0, "using_phone": 0}
        }
        self.last_auto_capture = 0
        
        # Configuration
        self.config = {
            "image_size": (640, 480),
            "save_size": (224, 224),
            "fps": 30,
            "quality": 95,
            "auto_capture_interval": 0.5,
            "camera_id": 0
        }
        
        self.setup_directories()
        self.load_existing_counts()
        self.create_interface()
        self.update_stats_display()
        
    def setup_window(self):
        """Thi·∫øt l·∫≠p c·ª≠a s·ªï ch√≠nh"""
        self.root.title("Thu Th·∫≠p D·ªØ Li·ªáu - Nh·∫≠n Di·ªán ƒêi·ªán Tho·∫°i")
        self.root.geometry("1000x600")
        self.root.configure(bg='#2c3e50')
        self.root.resizable(True, True)
        
        # Icon (n·∫øu c√≥)
        try:
            self.root.iconbitmap('icon.ico')
        except:
            pass
            
    def setup_directories(self):
        """T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c"""
        directories = [
            "data/no_phone",
            "data/using_phone"
        ]
        
        for directory in directories:
            os.makedirs(directory, exist_ok=True)
            
    def load_existing_counts(self):
        """ƒê·∫øm s·ªë ·∫£nh hi·ªán c√≥"""
        for class_name in ["no_phone", "using_phone"]:
            path = f"data/{class_name}"
            if os.path.exists(path):
                count = len([f for f in os.listdir(path) 
                            if f.lower().endswith(('.png', '.jpg', '.jpeg'))])
                self.image_count[class_name] = count
            
    def create_interface(self):
        """T·∫°o giao di·ªán ch√≠nh"""
        # Main container
        main_frame = tk.Frame(self.root, bg='#2c3e50')
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Left side - Camera view
        self.create_camera_section(main_frame)
        
        # Right side - Control panel
        self.create_control_panel(main_frame)
        
    def create_camera_section(self, parent):
        """T·∫°o ph·∫ßn hi·ªÉn th·ªã camera b√™n tr√°i"""
        camera_frame = tk.Frame(parent, bg='#34495e', relief=tk.RAISED, bd=2)
        camera_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 10))
        
        # Camera title
        title_label = tk.Label(camera_frame, text="üì∑ CAMERA VIEW", 
                              font=('Arial', 14, 'bold'),
                              bg='#34495e', fg='#ecf0f1')
        title_label.pack(pady=10)
        
        # Camera display
        self.camera_label = tk.Label(camera_frame, bg='#2c3e50', 
                                    text="Camera ch∆∞a ƒë∆∞·ª£c kh·ªüi ƒë·ªông\nNh·∫•n 'B·∫Øt ƒê·∫ßu Camera' ƒë·ªÉ b·∫Øt ƒë·∫ßu",
                                    font=('Arial', 12),
                                    fg='#bdc3c7')
        self.camera_label.pack(expand=True, padx=10, pady=10)
        
        # Status bar under camera
        self.status_frame = tk.Frame(camera_frame, bg='#34495e')
        self.status_frame.pack(fill=tk.X, padx=10, pady=(0, 10))
        
        self.status_label = tk.Label(self.status_frame, text="Tr·∫°ng th√°i: Ch·ªù kh·ªüi ƒë·ªông",
                                    font=('Arial', 10, 'bold'),
                                    bg='#34495e', fg='#f39c12')
        self.status_label.pack(side=tk.LEFT)
        
        self.mode_label = tk.Label(self.status_frame, text="",
                                  font=('Arial', 10, 'bold'),
                                  bg='#34495e', fg='#e74c3c')
        self.mode_label.pack(side=tk.RIGHT)
        
    def create_control_panel(self, parent):
        """T·∫°o b·∫£ng ƒëi·ªÅu khi·ªÉn b√™n ph·∫£i"""
        control_frame = tk.Frame(parent, bg='#34495e', relief=tk.RAISED, bd=2)
        control_frame.pack(side=tk.RIGHT, fill=tk.Y, padx=(0, 0))
        control_frame.configure(width=350)  # Fixed width
        
        # Title
        title_label = tk.Label(control_frame, text="üéõÔ∏è B·∫¢NG ƒêI·ªÄU KHI·ªÇN", 
                              font=('Arial', 14, 'bold'),
                              bg='#34495e', fg='#ecf0f1')
        title_label.pack(pady=15)
        
        # Camera controls
        self.create_camera_controls(control_frame)
        
        # Mode selection
        self.create_mode_selection(control_frame)
        
        # Capture controls
        self.create_capture_controls(control_frame)
        
        # Statistics
        self.create_statistics_section(control_frame)
        
        # Data management
        self.create_data_management(control_frame)
        
        # Instructions
        self.create_instructions(control_frame)
        
    def create_camera_controls(self, parent):
        """T·∫°o ƒëi·ªÅu khi·ªÉn camera"""
        frame = tk.LabelFrame(parent, text="üìπ ƒêi·ªÅu Khi·ªÉn Camera", 
                             font=('Arial', 10, 'bold'),
                             bg='#34495e', fg='#ecf0f1')
        frame.pack(fill=tk.X, padx=15, pady=10)
        
        # Camera ID
        id_frame = tk.Frame(frame, bg='#34495e')
        id_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(id_frame, text="Camera ID:", bg='#34495e', fg='#bdc3c7',
                font=('Arial', 9)).pack(side=tk.LEFT)
        
        self.camera_id_var = tk.IntVar(value=0)
        camera_id_spin = tk.Spinbox(id_frame, from_=0, to=10, width=5,
                                   textvariable=self.camera_id_var,
                                   font=('Arial', 9))
        camera_id_spin.pack(side=tk.RIGHT)
        
        # Auto capture interval
        interval_frame = tk.Frame(frame, bg='#34495e')
        interval_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(interval_frame, text="Kho·∫£ng c√°ch (s):", bg='#34495e', fg='#bdc3c7',
                font=('Arial', 9)).pack(side=tk.LEFT)
        
        self.interval_var = tk.DoubleVar(value=0.5)
        interval_spin = tk.Spinbox(interval_frame, from_=0.1, to=5.0, increment=0.1,
                                  width=8, textvariable=self.interval_var,
                                  font=('Arial', 9))
        interval_spin.pack(side=tk.RIGHT)
        
        # Camera button
        self.camera_btn = tk.Button(frame, text="‚ñ∂Ô∏è B·∫Øt ƒê·∫ßu Camera",
                                   command=self.toggle_camera,
                                   bg='#27ae60', fg='white',
                                   font=('Arial', 10, 'bold'),
                                   relief=tk.RAISED, bd=2)
        self.camera_btn.pack(fill=tk.X, padx=10, pady=10)
        
    def create_mode_selection(self, parent):
        """T·∫°o l·ª±a ch·ªçn ch·∫ø ƒë·ªô"""
        frame = tk.LabelFrame(parent, text="üì± Ch·∫ø ƒê·ªô Thu Th·∫≠p", 
                             font=('Arial', 10, 'bold'),
                             bg='#34495e', fg='#ecf0f1')
        frame.pack(fill=tk.X, padx=15, pady=10)
        
        self.mode_var = tk.StringVar()
        
        # No phone mode
        no_phone_btn = tk.Radiobutton(frame, text="üö´ Kh√¥ng d√πng ƒëi·ªán tho·∫°i",
                                     variable=self.mode_var, value="no_phone",
                                     command=self.set_mode,
                                     bg='#34495e', fg='#2ecc71',
                                     selectcolor='#27ae60',
                                     font=('Arial', 10, 'bold'))
        no_phone_btn.pack(anchor=tk.W, padx=10, pady=5)
        
        # Using phone mode
        using_phone_btn = tk.Radiobutton(frame, text="üì± ƒêang d√πng ƒëi·ªán tho·∫°i",
                                        variable=self.mode_var, value="using_phone",
                                        command=self.set_mode,
                                        bg='#34495e', fg='#e74c3c',
                                        selectcolor='#c0392b',
                                        font=('Arial', 10, 'bold'))
        using_phone_btn.pack(anchor=tk.W, padx=10, pady=5)
        
    def create_capture_controls(self, parent):
        """T·∫°o ƒëi·ªÅu khi·ªÉn ch·ª•p ·∫£nh"""
        frame = tk.LabelFrame(parent, text="üì∏ ƒêi·ªÅu Khi·ªÉn Ch·ª•p", 
                             font=('Arial', 10, 'bold'),
                             bg='#34495e', fg='#ecf0f1')
        frame.pack(fill=tk.X, padx=15, pady=10)
        
        # Manual capture
        manual_btn = tk.Button(frame, text="üì∏ Ch·ª•p Th·ªß C√¥ng",
                              command=self.manual_capture,
                              bg='#3498db', fg='white',
                              font=('Arial', 10, 'bold'))
        manual_btn.pack(fill=tk.X, padx=10, pady=5)
        
        # Auto capture toggle
        self.auto_btn = tk.Button(frame, text="üî¥ B·∫Øt ƒê·∫ßu T·ª± ƒê·ªông",
                                 command=self.toggle_auto_capture,
                                 bg='#e74c3c', fg='white',
                                 font=('Arial', 10, 'bold'))
        self.auto_btn.pack(fill=tk.X, padx=10, pady=5)
        
    def create_statistics_section(self, parent):
        """T·∫°o ph·∫ßn th·ªëng k√™"""
        frame = tk.LabelFrame(parent, text="üìä Th·ªëng K√™", 
                             font=('Arial', 10, 'bold'),
                             bg='#34495e', fg='#ecf0f1')
        frame.pack(fill=tk.X, padx=15, pady=10)
        
        # Current counts
        self.stats_labels = {}
        
        # No phone count
        no_phone_frame = tk.Frame(frame, bg='#34495e')
        no_phone_frame.pack(fill=tk.X, padx=10, pady=3)
        
        tk.Label(no_phone_frame, text="üö´ Kh√¥ng d√πng ƒêT:", 
                bg='#34495e', fg='#2ecc71', font=('Arial', 9, 'bold')).pack(side=tk.LEFT)
        
        self.stats_labels['no_phone'] = tk.Label(no_phone_frame, text="0", 
                                                bg='#34495e', fg='#ecf0f1', 
                                                font=('Arial', 9, 'bold'))
        self.stats_labels['no_phone'].pack(side=tk.RIGHT)
        
        # Using phone count
        using_phone_frame = tk.Frame(frame, bg='#34495e')
        using_phone_frame.pack(fill=tk.X, padx=10, pady=3)
        
        tk.Label(using_phone_frame, text="üì± ƒêang d√πng ƒêT:", 
                bg='#34495e', fg='#e74c3c', font=('Arial', 9, 'bold')).pack(side=tk.LEFT)
        
        self.stats_labels['using_phone'] = tk.Label(using_phone_frame, text="0", 
                                                   bg='#34495e', fg='#ecf0f1', 
                                                   font=('Arial', 9, 'bold'))
        self.stats_labels['using_phone'].pack(side=tk.RIGHT)
        
        # Session stats
        session_frame = tk.Frame(frame, bg='#34495e')
        session_frame.pack(fill=tk.X, padx=10, pady=3)
        
        tk.Label(session_frame, text="üéØ Phi√™n n√†y:", 
                bg='#34495e', fg='#f39c12', font=('Arial', 9, 'bold')).pack(side=tk.LEFT)
        
        self.stats_labels['session'] = tk.Label(session_frame, text="0", 
                                               bg='#34495e', fg='#ecf0f1', 
                                               font=('Arial', 9, 'bold'))
        self.stats_labels['session'].pack(side=tk.RIGHT)
        
    def create_data_management(self, parent):
        """T·∫°o qu·∫£n l√Ω d·ªØ li·ªáu"""
        frame = tk.LabelFrame(parent, text="üíæ Qu·∫£n L√Ω D·ªØ Li·ªáu", 
                             font=('Arial', 10, 'bold'),
                             bg='#34495e', fg='#ecf0f1')
        frame.pack(fill=tk.X, padx=15, pady=10)
        
        # Split data
        split_btn = tk.Button(frame, text="üìÇ Ph√¢n Chia D·ªØ li·ªáu YOLO",
                             command=self.split_data_to_yolo,
                             bg='#9b59b6', fg='white',
                             font=('Arial', 10, 'bold'))
        split_btn.pack(fill=tk.X, padx=10, pady=5)
        
        # Reset session
        reset_btn = tk.Button(frame, text="üîÑ Reset Th·ªëng K√™",
                             command=self.reset_session,
                             bg='#e67e22', fg='white',
                             font=('Arial', 10, 'bold'))
        reset_btn.pack(fill=tk.X, padx=10, pady=5)
        
    def create_instructions(self, parent):
        """T·∫°o h∆∞·ªõng d·∫´n"""
        frame = tk.LabelFrame(parent, text="‚ÑπÔ∏è H∆∞·ªõng D·∫´n", 
                             font=('Arial', 10, 'bold'),
                             bg='#34495e', fg='#ecf0f1')
        frame.pack(fill='both', expand=True, padx=15, pady=10)
        
        instructions = [
            "1. Ch·ªçn camera ID v√† b·∫Øt ƒë·∫ßu camera",
            "2. Ch·ªçn ch·∫ø ƒë·ªô thu th·∫≠p d·ªØ li·ªáu",
            "3. S·ª≠ d·ª•ng ch·ª•p th·ªß c√¥ng ho·∫∑c t·ª± ƒë·ªông",
            "4. Theo d√µi th·ªëng k√™ realtime",
            "5. Ph√¢n chia d·ªØ li·ªáu khi ho√†n th√†nh"
        ]
        
        for i, instruction in enumerate(instructions):
            tk.Label(frame, text=instruction, 
                    bg='#34495e', fg='#bdc3c7',
                    font=('Arial', 8),
                    justify=tk.LEFT).pack(anchor=tk.W, padx=10, pady=2)
            
    def toggle_camera(self):
        """B·∫≠t/t·∫Øt camera"""
        if not self.is_running:
            self.start_camera()
        else:
            self.stop_camera()
            
    def start_camera(self):
        """Kh·ªüi ƒë·ªông camera"""
        try:
            camera_id = self.camera_id_var.get()
            self.camera = cv2.VideoCapture(camera_id)
            
            if not self.camera.isOpened():
                raise Exception(f"Kh√¥ng th·ªÉ m·ªü camera ID: {camera_id}")
                
            # Set camera properties
            self.camera.set(cv2.CAP_PROP_FRAME_WIDTH, self.config["image_size"][0])
            self.camera.set(cv2.CAP_PROP_FRAME_HEIGHT, self.config["image_size"][1])
            self.camera.set(cv2.CAP_PROP_FPS, self.config["fps"])
            
            self.is_running = True
            self.camera_btn.configure(text="‚èπÔ∏è D·ª´ng Camera", bg='#e74c3c')
            self.status_label.configure(text="Tr·∫°ng th√°i: ƒêang ch·∫°y", fg='#2ecc71')
            
            # Start session
            if not self.session_stats["start_time"]:
                self.session_stats["start_time"] = datetime.now()
            
            # Start capture thread
            self.capture_thread = threading.Thread(target=self.capture_loop, daemon=True)
            self.capture_thread.start()
            
        except Exception as e:
            messagebox.showerror("L·ªói Kh·ªüi ƒê·ªông", f"Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông camera:\n{str(e)}")

            
    def stop_camera(self):
        """D·ª´ng camera"""
        self.is_running = False
        self.is_auto_recording = False
        
        if self.camera:
            self.camera.release()
            self.camera = None
            
        self.camera_btn.configure(text="‚ñ∂Ô∏è B·∫Øt ƒê·∫ßu Camera", bg='#27ae60')
        self.auto_btn.configure(text="üî¥ B·∫Øt ƒê·∫ßu T·ª± ƒê·ªông", bg='#e74c3c')
        self.status_label.configure(text="Tr·∫°ng th√°i: ƒê√£ d·ª´ng", fg='#e74c3c')
        self.mode_label.configure(text="")
        
        # Clear camera display
        self.camera_label.configure(image="", text="Camera ƒë√£ d·ª´ng")
        
    def capture_loop(self):
        """V√≤ng l·∫∑p capture camera"""
        while self.is_running and self.camera:
            ret, frame = self.camera.read()
            if not ret:
                continue
                
            # Flip frame
            frame = cv2.flip(frame, 1)
            self.current_frame = frame.copy()
            
            # Auto capture
            if (self.is_auto_recording and self.current_class and 
                time.time() - self.last_auto_capture >= self.interval_var.get()):
                self.save_image(frame)
                self.last_auto_capture = time.time()
            
            # Convert to display format
            self.display_frame(frame)
            
            time.sleep(1/30)  # ~30 FPS
            
    def display_frame(self, frame):
        """Hi·ªÉn th·ªã frame l√™n GUI"""
        if not self.is_running:
            return
            
        # Add overlay information
        overlay_frame = self.add_overlay(frame.copy())
        
        # Convert to PIL format
        rgb_frame = cv2.cvtColor(overlay_frame, cv2.COLOR_BGR2RGB)
        pil_image = Image.fromarray(rgb_frame)
        
        # Resize to fit display
        display_size = (600, 450)  # Adjust as needed
        pil_image = pil_image.resize(display_size, Image.Resampling.LANCZOS)
        
        # Convert to PhotoImage
        photo = ImageTk.PhotoImage(pil_image)
        
        # Update label
        self.camera_label.configure(image=photo, text="")
        self.camera_label.image = photo  # Keep reference
        
    def add_overlay(self, frame):
        """Th√™m th√¥ng tin overlay l√™n frame"""
        height, width = frame.shape[:2]
        
        # Add recording indicator
        if self.is_auto_recording:
            cv2.circle(frame, (width-30, 30), 10, (0, 0, 255), -1)
            cv2.putText(frame, "REC", (width-60, 35), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
        
        # Add mode indicator
        if self.current_class:
            mode_text = "DANG DUNG DIEN THOAI" if self.current_class == "using_phone" else "KHONG DUNG DIEN THOAI"
            color = (0, 0, 255) if self.current_class == "using_phone" else (0, 255, 0)
            
            cv2.rectangle(frame, (10, height-40), (width-10, height-10), color, 2)
            cv2.putText(frame, mode_text, (20, height-20), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)
        
        return frame
        
    def set_mode(self):
        """Thi·∫øt l·∫≠p ch·∫ø ƒë·ªô thu th·∫≠p"""
        self.current_class = self.mode_var.get()
        
        if self.current_class == "no_phone":
            self.mode_label.configure(text="üö´ Kh√¥ng d√πng ƒêT", fg='#2ecc71')
        elif self.current_class == "using_phone":
            self.mode_label.configure(text="üì± ƒêang d√πng ƒêT", fg='#e74c3c')
            
    def manual_capture(self):
        """Ch·ª•p ·∫£nh th·ªß c√¥ng"""
        if not self.current_frame is None and self.current_class:
            self.save_image(self.current_frame)
        elif not self.current_class:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn ch·∫ø ƒë·ªô thu th·∫≠p tr∆∞·ªõc!")
        else:
            messagebox.showwarning("C·∫£nh b√°o", "Camera ch∆∞a s·∫µn s√†ng!")
            
    def toggle_auto_capture(self):
        """B·∫≠t/t·∫Øt ch·ª•p t·ª± ƒë·ªông"""
        if not self.current_class:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn ch·∫ø ƒë·ªô thu th·∫≠p tr∆∞·ªõc!")
            return
            
        self.is_auto_recording = not self.is_auto_recording
        
        if self.is_auto_recording:
            self.auto_btn.configure(text="‚èπÔ∏è D·ª´ng T·ª± ƒê·ªông", bg='#2ecc71')
            self.last_auto_capture = time.time()
        else:
            self.auto_btn.configure(text="üî¥ B·∫Øt ƒê·∫ßu T·ª± ƒê·ªông", bg='#e74c3c')
            
    def save_image(self, frame):
        """L∆∞u ·∫£nh"""
        if not self.current_class:
            return
            
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S_%f")[:-3]
        filename = f"{self.current_class}_{timestamp}_{self.image_count[self.current_class]:06d}.jpg"
        filepath = f"data/{self.current_class}/{filename}"
        
        # Resize image before saving
        img_resized = cv2.resize(frame, self.config["save_size"])
        
        # Save image
        cv2.imwrite(filepath, img_resized, [cv2.IMWRITE_JPEG_QUALITY, self.config["quality"]])
        
        # Update counts
        self.image_count[self.current_class] += 1
        self.session_stats["total_images"] += 1
        self.session_stats["images_per_class"][self.current_class] += 1
        
        # Update display
        self.update_stats_display()
        
        print(f"üì∏ ƒê√£ l∆∞u: {filename}")
        
    def count_images_on_disk(self, class_name):
        """ƒê·∫øm s·ªë ·∫£nh th·ª±c t·∫ø tr√™n ·ªï ƒëƒ©a cho class_name"""
        path = f"data/{class_name}"
        if os.path.exists(path):
            return len([f for f in os.listdir(path)
                       if f.lower().endswith(('.png', '.jpg', '.jpeg'))])
        return 0

    def update_stats_display(self):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã th·ªëng k√™ t·ª´ ·ªï ƒëƒ©a"""
        no_phone_count = self.count_images_on_disk('no_phone')
        using_phone_count = self.count_images_on_disk('using_phone')
        self.stats_labels['no_phone'].configure(text=str(no_phone_count))
        self.stats_labels['using_phone'].configure(text=str(using_phone_count))
        self.stats_labels['session'].configure(text=str(self.session_stats['total_images']))

    def verify_dataset_structure(self):
        """Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu YOLO"""
        print("="*50)
        print("Ki·ªÉm tra C·∫•u tr√∫c D·ªØ li·ªáu")
        print("="*50)
        
        required_dirs = [
            "data/train/images",
            "data/train/labels", 
            "data/val/images",
            "data/val/labels"
        ]
        
        total_train_images = 0
        total_train_labels = 0
        total_val_images = 0
        total_val_labels = 0
        
        for dir_path in required_dirs:
            if os.path.exists(dir_path):
                files = [f for f in os.listdir(dir_path) if os.path.isfile(os.path.join(dir_path, f))]
                file_count = len(files)
                print(f"‚úì {dir_path}: {file_count} files")
                
                # Count files for verification
                if "train/images" in dir_path:
                    total_train_images = file_count
                elif "train/labels" in dir_path:
                    total_train_labels = file_count
                elif "val/images" in dir_path:
                    total_val_images = file_count
                elif "val/labels" in dir_path:
                    total_val_labels = file_count
            else:
                print(f"‚úó {dir_path}: Missing!")
                os.makedirs(dir_path, exist_ok=True)
                print(f"  ‚úì Created {dir_path}")
                
        # Verify image-label correspondence
        print(f"\nKi·ªÉm tra t√≠nh nh·∫•t qu√°n d·ªØ li·ªáu:")
        print(f"Train - Images: {total_train_images}, Labels: {total_train_labels} {'‚úì' if total_train_images == total_train_labels else '‚úó'}")
        print(f"Val - Images: {total_val_images}, Labels: {total_val_labels} {'‚úì' if total_val_images == total_val_labels else '‚úó'}")
        
        # Check for potential issues and show message box
        message = ""
        if total_train_images == 0:
            message += "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ·∫£nh train!\n"
        if total_val_images == 0:
            message += "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ·∫£nh validation!\n"
        
        if message:
            messagebox.showwarning("C·∫£nh b√°o", message)
        elif total_train_images == total_train_labels and total_val_images == total_val_labels:
            messagebox.showinfo("Th√†nh c√¥ng", "C·∫•u tr√∫c d·ªØ li·ªáu h·ª£p l·ªá!\n" +
                              f"Train: {total_train_images} ·∫£nh\n" +
                              f"Validation: {total_val_images} ·∫£nh")
        else:
            messagebox.showerror("L·ªói", "S·ªë l∆∞·ª£ng ·∫£nh v√† nh√£n kh√¥ng kh·ªõp!\n" +
                               f"Train: {total_train_images} ·∫£nh, {total_train_labels} nh√£n\n" +
                               f"Validation: {total_val_images} ·∫£nh, {total_val_labels} nh√£n")
        
        print("="*50)
        
    def split_data_to_yolo(self):
        """Ph√¢n chia d·ªØ li·ªáu th√†nh ƒë·ªãnh d·∫°ng YOLO v·ªõi progress bar"""
        print("="*50)
        print("B·∫Øt ƒë·∫ßu ph√¢n chia d·ªØ li·ªáu YOLO...")
        print("="*50)
        
        # Ki·ªÉm tra d·ªØ li·ªáu g·ªëc
        no_phone_path = "data/no_phone"
        using_phone_path = "data/using_phone"
        
        if not os.path.exists(no_phone_path) or not os.path.exists(using_phone_path):
            messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c d·ªØ li·ªáu g·ªëc!")
            return
            
        # ƒê·∫øm s·ªë ·∫£nh
        no_phone_images = [f for f in os.listdir(no_phone_path) 
                          if f.lower().endswith(('.png', '.jpg', '.jpeg'))]
        using_phone_images = [f for f in os.listdir(using_phone_path) 
                             if f.lower().endswith(('.png', '.jpg', '.jpeg'))]
        
        if len(no_phone_images) == 0 or len(using_phone_images) == 0:
            messagebox.showerror("L·ªói", "C·∫ßn c√≥ √≠t nh·∫•t 1 ·∫£nh cho m·ªói class!")
            return
            
        total_images = len(no_phone_images) + len(using_phone_images)
        print(f"T·ªïng s·ªë ·∫£nh: {total_images}")
        print(f"- Kh√¥ng d√πng ƒëi·ªán tho·∫°i: {len(no_phone_images)}")
        print(f"- ƒêang d√πng ƒëi·ªán tho·∫°i: {len(using_phone_images)}")
        
        # T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c YOLO
        yolo_dirs = [
            "data/train/images",
            "data/train/labels",
            "data/val/images", 
            "data/val/labels"
        ]
        
        for dir_path in yolo_dirs:
            os.makedirs(dir_path, exist_ok=True)
            # X√≥a file c≈©
            for file in os.listdir(dir_path):
                os.remove(os.path.join(dir_path, file))
        
        # T·ª∑ l·ªá ph√¢n chia (80% train, 20% val)
        train_ratio = 0.8
        
        # T·ªïng s·ªë file c·∫ßn x·ª≠ l√Ω (m·ªói ·∫£nh t·∫°o 1 ·∫£nh + 1 label)
        total_operations = total_images * 2
        
        # T·∫°o progress window
        progress_window = tk.Toplevel(self.root)
        progress_window.title("ƒêang ph√¢n chia d·ªØ li·ªáu...")
        progress_window.geometry("400x150")
        progress_window.configure(bg='#2c3e50')
        progress_window.resizable(False, False)
        
        # Center the progress window
        progress_window.transient(self.root)
        progress_window.grab_set()
        
        tk.Label(progress_window, text="ƒêang ph√¢n chia d·ªØ li·ªáu YOLO...", 
                font=('Arial', 12, 'bold'), bg='#2c3e50', fg='#ecf0f1').pack(pady=10)
        
        progress_var = tk.DoubleVar()
        progress_bar = ttk.Progressbar(progress_window, variable=progress_var, 
                                      maximum=100, length=350)
        progress_bar.pack(pady=10)
        
        status_label = tk.Label(progress_window, text="Chu·∫©n b·ªã...", 
                               font=('Arial', 10), bg='#2c3e50', fg='#bdc3c7')
        status_label.pack(pady=5)
        
        # Update progress function
        def update_progress(current, total, message):
            progress = (current / total) * 100
            progress_var.set(progress)
            status_label.configure(text=message)
            progress_window.update()
        
        def process_class_data(images, class_name, class_id):
            """X·ª≠ l√Ω d·ªØ li·ªáu cho m·ªôt class"""
            np.random.shuffle(images)  # Tr·ªôn ng·∫´u nhi√™n
            
            split_index = int(len(images) * train_ratio)
            train_images = images[:split_index]
            val_images = images[split_index:]
            
            processed = 0
            
            # X·ª≠ l√Ω train images
            for img_name in train_images:
                # Copy image
                src_path = os.path.join(f"data/{class_name}", img_name)
                dst_path = os.path.join("data/train/images", img_name)
                shutil.copy2(src_path, dst_path)
                
                # T·∫°o label file
                label_name = os.path.splitext(img_name)[0] + ".txt"
                label_path = os.path.join("data/train/labels", label_name)
                
                # T·∫°o bounding box gi·∫£ (full image)
                with open(label_path, 'w') as f:
                    f.write(f"{class_id} 0.5 0.5 1.0 1.0\n")
                
                processed += 2  # 1 image + 1 label
                update_progress(processed, total_operations, 
                              f"X·ª≠ l√Ω train {class_name}: {len(train_images)} ·∫£nh")
            
            # X·ª≠ l√Ω validation images
            for img_name in val_images:
                # Copy image
                src_path = os.path.join(f"data/{class_name}", img_name)
                dst_path = os.path.join("data/val/images", img_name)
                shutil.copy2(src_path, dst_path)
                
                # T·∫°o label file
                label_name = os.path.splitext(img_name)[0] + ".txt"
                label_path = os.path.join("data/val/labels", label_name)
                
                # T·∫°o bounding box gi·∫£ (full image)
                with open(label_path, 'w') as f:
                    f.write(f"{class_id} 0.5 0.5 1.0 1.0\n")
                
                processed += 2  # 1 image + 1 label
                update_progress(processed, total_operations,
                              f"X·ª≠ l√Ω val {class_name}: {len(val_images)} ·∫£nh")
            
            return len(train_images), len(val_images), processed
        
        try:
            total_processed = 0
            
            # X·ª≠ l√Ω class "no_phone" (class_id = 0)
            train_no_phone, val_no_phone, processed = process_class_data(
                no_phone_images, "no_phone", 0)
            total_processed += processed
            
            # X·ª≠ l√Ω class "using_phone" (class_id = 1)  
            train_using_phone, val_using_phone, processed = process_class_data(
                using_phone_images, "using_phone", 1)
            total_processed += processed
            
            # T·∫°o file c·∫•u h√¨nh YOLO
            self.create_yolo_config(train_no_phone + train_using_phone,
                                  val_no_phone + val_using_phone)
            
            # Ho√†n th√†nh
            update_progress(total_operations, total_operations, "Ho√†n th√†nh!")
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            result_message = f"""‚úÖ Ph√¢n chia d·ªØ li·ªáu th√†nh c√¥ng!

üìä Th·ªëng k√™:
‚Ä¢ Train: {train_no_phone + train_using_phone} ·∫£nh
  - Kh√¥ng d√πng ƒêT: {train_no_phone}
  - ƒêang d√πng ƒêT: {train_using_phone}

‚Ä¢ Validation: {val_no_phone + val_using_phone} ·∫£nh  
  - Kh√¥ng d√πng ƒêT: {val_no_phone}
  - ƒêang d√πng ƒêT: {val_using_phone}

üìÅ C·∫•u tr√∫c ƒë√£ t·∫°o:
‚Ä¢ data/train/images/ & labels/
‚Ä¢ data/val/images/ & labels/
‚Ä¢ data/dataset.yaml (c·∫•u h√¨nh YOLO)"""
            
            print("\n" + "="*50)
            print("K·∫æT QU·∫¢ PH√ÇN CHIA D·ªÆ LI·ªÜU")
            print("="*50)
            print(f"‚úÖ Train: {train_no_phone + train_using_phone} ·∫£nh")
            print(f"‚úÖ Validation: {val_no_phone + val_using_phone} ·∫£nh")
            print(f"‚úÖ T·ªïng c·ªông: {total_images} ·∫£nh ƒë∆∞·ª£c x·ª≠ l√Ω")
            print("="*50)
            
            # ƒê√≥ng progress window tr∆∞·ªõc khi hi·ªán messagebox
            progress_window.destroy()
            
            messagebox.showinfo("Th√†nh c√¥ng", result_message)
            
        except Exception as e:
            progress_window.destroy()
            error_msg = f"L·ªói khi ph√¢n chia d·ªØ li·ªáu:\n{str(e)}"
            print(f"‚ùå {error_msg}")
            messagebox.showerror("L·ªói", error_msg)
    
    def create_yolo_config(self, train_count, val_count):
        """T·∫°o file c·∫•u h√¨nh YOLO"""
        config = {
            'path': './data',  # ƒê∆∞·ªùng d·∫´n dataset root
            'train': 'train/images',  # ƒê∆∞·ªùng d·∫´n train images (relative to path)
            'val': 'val/images',      # ƒê∆∞·ªùng d·∫´n val images (relative to path)
            'test': '',               # ƒê∆∞·ªùng d·∫´n test images (optional)
            
            'nc': 2,  # S·ªë l∆∞·ª£ng classes
            'names': ['no_phone', 'using_phone']  # T√™n c√°c classes
        }
        
        # L∆∞u file YAML
        config_path = "data/dataset.yaml"
        with open(config_path, 'w', encoding='utf-8') as f:
            yaml.dump(config, f, default_flow_style=False, allow_unicode=True)
        
        print(f"‚úÖ ƒê√£ t·∫°o file c·∫•u h√¨nh: {config_path}")
        
        # T·∫°o th√™m file README
        readme_content = f"""# Phone Usage Detection Dataset

## Th√¥ng tin Dataset
- **T·ªïng s·ªë ·∫£nh**: {train_count + val_count}
- **Classes**: 2 (no_phone, using_phone)
- **Train**: {train_count} ·∫£nh
- **Validation**: {val_count} ·∫£nh
- **Ng√†y t·∫°o**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## C·∫•u tr√∫c th∆∞ m·ª•c
```
data/
‚îú‚îÄ‚îÄ train/
‚îÇ   ‚îú‚îÄ‚îÄ images/     # ·∫¢nh training
‚îÇ   ‚îî‚îÄ‚îÄ labels/     # Label files (.txt)
‚îú‚îÄ‚îÄ val/
‚îÇ   ‚îú‚îÄ‚îÄ images/     # ·∫¢nh validation  
‚îÇ   ‚îî‚îÄ‚îÄ labels/     # Label files (.txt)
‚îú‚îÄ‚îÄ dataset.yaml    # C·∫•u h√¨nh YOLO
‚îî‚îÄ‚îÄ README.md       # File n√†y

no_phone/           # D·ªØ li·ªáu g·ªëc - kh√¥ng d√πng ƒëi·ªán tho·∫°i
using_phone/        # D·ªØ li·ªáu g·ªëc - ƒëang d√πng ƒëi·ªán tho·∫°i
```

## S·ª≠ d·ª•ng v·ªõi YOLO
```python
from ultralytics import YOLO

# Load model
model = YOLO('yolov8n.pt')  # ho·∫∑c yolov8s.pt, yolov8m.pt, etc.

# Train
model.train(data='data/dataset.yaml', epochs=100, imgsz=640)
```

## Classes
- **0**: no_phone - Kh√¥ng s·ª≠ d·ª•ng ƒëi·ªán tho·∫°i
- **1**: using_phone - ƒêang s·ª≠ d·ª•ng ƒëi·ªán tho·∫°i

## Ghi ch√∫
- T·∫•t c·∫£ bounding box ƒë∆∞·ª£c thi·∫øt l·∫≠p full image (0.5 0.5 1.0 1.0)
- ƒê·ªãnh d·∫°ng label: class_id center_x center_y width height (normalized)
- Dataset ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·ªüi Data Collection GUI
"""
        
        readme_path = "data/README.md"
        with open(readme_path, 'w', encoding='utf-8') as f:
            f.write(readme_content)
        
        print(f"‚úÖ ƒê√£ t·∫°o file README: {readme_path}")
            
    def reset_session(self):
        """Reset th·ªëng k√™ phi√™n l√†m vi·ªác"""
        if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën reset th·ªëng k√™ phi√™n l√†m vi·ªác?"):
            self.session_stats = {
                "start_time": datetime.now() if self.is_running else None,
                "total_images": 0,
                "images_per_class": {"no_phone": 0, "using_phone": 0}
            }
            self.update_stats_display()
            messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ reset th·ªëng k√™ phi√™n l√†m vi·ªác!")
            
    def on_closing(self):
        """X·ª≠ l√Ω khi ƒë√≥ng ·ª©ng d·ª•ng"""
        if self.is_running:
            if messagebox.askokcancel("Tho√°t", "Camera ƒëang ch·∫°y. B·∫°n c√≥ mu·ªën tho√°t?"):
                self.stop_camera()
                self.root.quit()
        else:
            self.root.quit()

def main():
    """H√†m ch√≠nh"""
    print("="*60)
    print("üöÄ KH·ªûI ƒê·ªòNG H·ªÜ TH·ªêNG THU TH·∫¨P D·ªÆ LI·ªÜU")
    print("üì± Nh·∫≠n di·ªán s·ª≠ d·ª•ng ƒëi·ªán tho·∫°i")
    print("="*60)
    
    root = tk.Tk()
    app = ModernDataCollectionGUI(root)
    
    # Handle window closing
    root.protocol("WM_DELETE_WINDOW", app.on_closing)
    
    print("‚úÖ Giao di·ªán ƒë√£ s·∫µn s√†ng!")
    print("üí° H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:")
    print("   1. Ch·ªçn Camera ID v√† kh·ªüi ƒë·ªông camera")
    print("   2. Ch·ªçn ch·∫ø ƒë·ªô thu th·∫≠p (c√≥/kh√¥ng ƒëi·ªán tho·∫°i)")
    print("   3. S·ª≠ d·ª•ng ch·ª•p th·ªß c√¥ng ho·∫∑c t·ª± ƒë·ªông")
    print("   4. Theo d√µi ti·∫øn ƒë·ªô qua th·ªëng k√™")
    print("   5. Ph√¢n chia d·ªØ li·ªáu YOLO khi ho√†n th√†nh")
    print("="*60)
    
    try:
        root.mainloop()
    except KeyboardInterrupt:
        print("\nüõë D·ª´ng ch∆∞∆°ng tr√¨nh b·∫±ng Ctrl+C")
        if app.is_running:
            app.stop_camera()
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")
    finally:
        print("üëã T·∫°m bi·ªát!")

if __name__ == "__main__":
    main()