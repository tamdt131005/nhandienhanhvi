import cv2
import numpy as np
from collections import deque
import time
import pygame
import mediapipe as mp
import math
import os
from ultralytics import YOLO


class PhatHienBuonNgu:
    def __init__(self, yolo_model_path=None):
        # Khoi tao MediaPipe Face Mesh
        self.mp_face_mesh = mp.solutions.face_mesh
        self.face_mesh = self.mp_face_mesh.FaceMesh(
            max_num_faces=2,
            refine_landmarks=True,
            min_detection_confidence=0.5,
            min_tracking_confidence=0.5
        )
        self.mp_drawing = mp.solutions.drawing_utils
        self.mp_drawing_styles = mp.solutions.drawing_styles
        
        # Dinh nghia chi so cho cac diem landmarks cua mat
        self.CHI_SO_MAT_TRAI = [263, 387, 385, 362, 380, 373]
        self.CHI_SO_MAT_PHAI = [33, 160, 158, 133, 144, 153]
        
        # Khoi tao bien dem chop mat va thoi gian
        self.dem_mat_nham = 0
        self.thoi_gian_mat_nham = 0
        self.thoi_gian_canh_bao_cuoi = 0
        self.dem_mat_mo_lien_tuc = 0
        self.thoi_gian_tinh_tao = 0
        
        # Cai dat nguong canh bao
        self.NGUONG_MAT_NHAM_FRAME = 8
        self.NGUONG_THOI_GIAN_BUON_NGU = 2
        self.NGUONG_EAR = 0.27
        self.NGUONG_EAR_NGHIEM_NGAT = 0.23
        self.NGUONG_EAR_MO = 0.50
        self.SO_FRAME_XAC_NHAN_TINH_TAO = 10
        self.THOI_GIAN_CHO_GIUA_CANH_BAO = 3.0
        self.SO_LAN_CANH_BAO_TICH_LUY = 0
        
        # === C√ÅC THAM S·ªê FUSION ML+DL ===
        self.TRONG_SO_ML = 0.7  # TƒÉng tr·ªçng s·ªë cho ML (EAR)
        self.TRONG_SO_DL = 0.3  # Gi·∫£m tr·ªçng s·ªë cho DL (YOLO)
        self.NGUONG_FUSION_BUON_NGU = 0.53  # Gi·∫£m ng∆∞·ª°ng t·ªïng h·ª£p ƒë·ªÉ tƒÉng nh·∫°y
        self.SO_FRAME_FUSION_XAC_NHAN = 8  # Gi·∫£m s·ªë frame x√°c nh·∫≠n li√™n t·ª•c
        
        # Buffer l∆∞u tr·ªØ k·∫øt qu·∫£ fusion
        self.bo_dem_ket_qua_fusion = deque(maxlen=10)
        self.bo_dem_yolo_results = deque(maxlen=5)
        self.bo_dem_yolo_drowsy = deque(maxlen=10)  # Buffer ri√™ng cho DL drowsy detection
        self.dem_frame_buon_ngu_fusion = 0
        self.dem_frame_yolo_drowsy = 0  # ƒê·∫øm frame drowsy li√™n t·ª•c cho DL
        
        # Khoi tao buffer luu tru cac dac trung theo chuoi thoi gian
        self.SO_BUOC_THOI_GIAN = 20
        self.bo_dem_dac_trung = deque(maxlen=self.SO_BUOC_THOI_GIAN)
        self.bo_dem_ear = deque(maxlen=15)
        
        # Khoi tao pygame cho canh bao am thanh
        try:
            pygame.mixer.init()
            self.co_am_thanh = True
        except:
            self.co_am_thanh = False
            print("Khong the khoi tao am thanh")
            
        # Kh·ªüi t·∫°o YOLOv8n model detection (DL)
        self.yolo_model = None
        self.yolo_model_path = yolo_model_path or 'savemodel/drowsiness_detection_yolov8s_tuned/weights/best.pt'
        try:
            print(f"üîÑ ƒêang t·∫£i YOLOv8 model t·ª´: {self.yolo_model_path}")
            self.yolo_model = YOLO(self.yolo_model_path)
            print("‚úÖ ƒê√£ t·∫£i YOLOv8 model th√†nh c√¥ng!")
        except Exception as e:
            print(f"‚ùå L·ªói khi t·∫£i YOLOv8 model: {e}")
            self.yolo_model = None

    def tinh_toan_ear(self, cac_diem_mat):
        """Tinh toan Eye Aspect Ratio (EAR) tu cac diem landmarks cua mat"""
        v1 = np.linalg.norm(cac_diem_mat[1] - cac_diem_mat[5])
        v2 = np.linalg.norm(cac_diem_mat[2] - cac_diem_mat[4])
        h = np.linalg.norm(cac_diem_mat[0] - cac_diem_mat[3])
        ear = (v1 + v2) / (2.0 * h) if h > 0 else 0
        return ear
    
    def trich_xuat_diem_mat(self, face_landmarks, chi_so_mat):
        """Tr√≠ch xu·∫•t ƒë√∫ng 6 ƒëi·ªÉm landmark c·ªßa m·∫Øt ƒë·ªÉ t√≠nh EAR"""
        cac_diem = []
        for idx in chi_so_mat:
            try:
                cac_diem.append(np.array([
                    face_landmarks.landmark[idx].x,
                    face_landmarks.landmark[idx].y
                ]))
            except IndexError:
                cac_diem.append(np.array([0.0, 0.0]))
        return np.array(cac_diem)
    
    def tinh_diem_so_ml_buon_ngu(self, ear_trung_binh, goc_yaw, thoi_gian_mat_nham):
        """T√≠nh ƒëi·ªÉm s·ªë bu·ªìn ng·ªß t·ª´ ML (0.0 - 1.0)"""
        diem_so = 0.0
        
        # ƒêi·ªÉm s·ªë t·ª´ EAR (40% tr·ªçng s·ªë)
        if ear_trung_binh <= self.NGUONG_EAR_NGHIEM_NGAT:
            diem_so += 0.4  # EAR r·∫•t th·∫•p
        elif ear_trung_binh <= self.NGUONG_EAR:
            diem_so += 0.3 * (self.NGUONG_EAR - ear_trung_binh) / (self.NGUONG_EAR - self.NGUONG_EAR_NGHIEM_NGAT)
        
        # ƒêi·ªÉm s·ªë t·ª´ th·ªùi gian m·∫Øt nh·∫Øm (35% tr·ªçng s·ªë)
        if thoi_gian_mat_nham > 0:
            diem_so += min(0.35, thoi_gian_mat_nham / self.NGUONG_THOI_GIAN_BUON_NGU * 0.35)
        
        # ƒêi·ªÉm s·ªë t·ª´ g√≥c yaw - ƒë·∫ßu nghi√™ng (25% tr·ªçng s·ªë)
        if abs(goc_yaw) > 20:
            diem_so += min(0.25, abs(goc_yaw) / 45.0 * 0.25)
        
        return min(diem_so, 1.0)
    
    def tinh_diem_so_dl_buon_ngu(self, yolo_label, confidence=0.8):
        """T√≠nh ƒëi·ªÉm s·ªë bu·ªìn ng·ªß t·ª´ DL YOLO v·ªõi logic 10 frame li√™n t·ª•c (0.0 - 1.0)"""
        if yolo_label is None:
            self.dem_frame_yolo_drowsy = max(0, self.dem_frame_yolo_drowsy - 1)
            return 0.0
        
        # L∆∞u tr·∫°ng th√°i v√†o buffer
        self.bo_dem_yolo_drowsy.append(yolo_label.lower() == 'drowsy')
        
        if yolo_label.lower() == 'drowsy':
            self.dem_frame_yolo_drowsy += 1
            # C·∫ßn √≠t nh·∫•t 10 frame li√™n t·ª•c m·ªõi x√°c nh·∫≠n drowsy
            if self.dem_frame_yolo_drowsy >= 10:
                return confidence
            else:
                return confidence * 0.5  # Gi·∫£m ƒë·ªô tin c·∫≠y n·∫øu ch∆∞a ƒë·ªß 10 frame
        elif yolo_label.lower() == 'alert':
            self.dem_frame_yolo_drowsy = 0
            return 0.0
        else:
            self.dem_frame_yolo_drowsy = max(0, self.dem_frame_yolo_drowsy - 1)
            return 0.0
    
    def hop_nhat_ket_qua_ml_dl(self, diem_so_ml, diem_so_dl, yolo_label):
        """H·ª£p nh·∫•t k·∫øt qu·∫£ t·ª´ ML v√† DL ƒë·ªÉ ƒë∆∞a ra quy·∫øt ƒë·ªãnh cu·ªëi c√πng"""
        # T√≠nh ƒëi·ªÉm s·ªë t·ªïng h·ª£p theo tr·ªçng s·ªë
        diem_so_tong_hop = (diem_so_ml * self.TRONG_SO_ML + 
                           diem_so_dl * self.TRONG_SO_DL)
        
        # L∆∞u v√†o buffer ƒë·ªÉ l√†m m∆∞·ª£t k·∫øt qu·∫£
        self.bo_dem_ket_qua_fusion.append(diem_so_tong_hop)
        self.bo_dem_yolo_results.append(yolo_label)
        
        # T√≠nh ƒëi·ªÉm trung b√¨nh t·ª´ buffer
        diem_so_trung_binh = np.mean(list(self.bo_dem_ket_qua_fusion))
        
        # X√°c ƒë·ªãnh tr·∫°ng th√°i cu·ªëi c√πng
        trang_thai_fusion = "tinh_tao"
        do_tin_cay = diem_so_trung_binh
        mau_fusion = (0, 255, 0)  # Xanh l√° = t·ªânh t√°o
        
        # Logic quy·∫øt ƒë·ªãnh ph·ª©c t·∫°p h∆°n
        if diem_so_trung_binh >= self.NGUONG_FUSION_BUON_NGU:
            # Ki·ªÉm tra xem c√≥ ƒë·ªß frame li√™n t·ª•c kh√¥ng
            if len(self.bo_dem_ket_qua_fusion) >= self.SO_FRAME_FUSION_XAC_NHAN:
                cac_frame_gan_day = list(self.bo_dem_ket_qua_fusion)[-self.SO_FRAME_FUSION_XAC_NHAN:]
                if all(score >= self.NGUONG_FUSION_BUON_NGU * 0.8 for score in cac_frame_gan_day):
                    self.dem_frame_buon_ngu_fusion += 1
                    trang_thai_fusion = "buon_ngu"
                    mau_fusion = (0, 0, 255)  # ƒê·ªè = bu·ªìn ng·ªß
                else:
                    trang_thai_fusion = "nghi_ngo"
                    mau_fusion = (0, 165, 255)  # Cam = nghi ng·ªù
            else:
                trang_thai_fusion = "nghi_ngo"
                mau_fusion = (0, 165, 255)
        elif diem_so_trung_binh >= self.NGUONG_FUSION_BUON_NGU * 0.5:
            trang_thai_fusion = "canh_bao"
            mau_fusion = (0, 255, 255)  # V√†ng = c·∫£nh b√°o
        else:
            self.dem_frame_buon_ngu_fusion = max(0, self.dem_frame_buon_ngu_fusion - 1)
        
        # X√°c ƒë·ªãnh m·ª©c ƒë·ªô nguy hi·ªÉm
        muc_do_nguy_hiem = "TH·∫§P"
        if do_tin_cay >= 0.8:
            muc_do_nguy_hiem = "CAO"
        elif do_tin_cay >= 0.6:
            muc_do_nguy_hiem = "TRUNG B√åNH"
        
        return {
            'trang_thai_fusion': trang_thai_fusion,
            'diem_so_ml': diem_so_ml,
            'diem_so_dl': diem_so_dl,
            'diem_so_tong_hop': diem_so_tong_hop,
            'diem_so_trung_binh': diem_so_trung_binh,
            'do_tin_cay': do_tin_cay,
            'mau_fusion': mau_fusion,
            'muc_do_nguy_hiem': muc_do_nguy_hiem,
            'dem_frame_buon_ngu': self.dem_frame_buon_ngu_fusion
        }
    
    def trich_xuat_hinh_mat(self, frame, face_landmarks, chi_so_mat, kich_thuoc_mat=(24, 24)):
        """Trich xuat va chuan hoa anh mat tu frame"""
        h, w, _ = frame.shape
        diem_mat = []
        for idx in chi_so_mat:
            x, y = int(face_landmarks.landmark[idx].x * w), int(face_landmarks.landmark[idx].y * h)
            diem_mat.append((x, y))
        
        min_x = max(0, min([x for x, y in diem_mat]) - int((max([x for x, y in diem_mat]) - min([x for x, y in diem_mat])) * 0.2))
        max_x = min(w, max([x for x, y in diem_mat]) + int((max([x for x, y in diem_mat]) - min([x for x, y in diem_mat])) * 0.2))
        min_y = max(0, min([y for x, y in diem_mat]) - int((max([y for x, y in diem_mat]) - min([y for x, y in diem_mat])) * 0.2))
        max_y = min(h, max([y for x, y in diem_mat]) + int((max([y for x, y in diem_mat]) - min([y for x, y in diem_mat])) * 0.2))
        
        hinh_mat = frame[min_y:max_y, min_x:max_x]
        if hinh_mat.size == 0:
            return np.zeros(kich_thuoc_mat)
        
        hinh_mat = cv2.cvtColor(hinh_mat, cv2.COLOR_BGR2GRAY)
        hinh_mat = cv2.resize(hinh_mat, kich_thuoc_mat)
        hinh_mat = hinh_mat / 255.0
        return hinh_mat
    
    def trich_xuat_dac_trung(self, frame, face_landmarks):
        """Trich xuat cac dac trung cho mo hinh hoc sau"""
        h, w, _ = frame.shape
        
        hinh_mat_trai = self.trich_xuat_hinh_mat(frame, face_landmarks, self.CHI_SO_MAT_TRAI)
        hinh_mat_phai = self.trich_xuat_hinh_mat(frame, face_landmarks, self.CHI_SO_MAT_PHAI)
        
        mat_trai = self.trich_xuat_diem_mat(face_landmarks, self.CHI_SO_MAT_TRAI)
        mat_phai = self.trich_xuat_diem_mat(face_landmarks, self.CHI_SO_MAT_PHAI)
        
        ear_trai = self.tinh_toan_ear(mat_trai)
        ear_phai = self.tinh_toan_ear(mat_phai)
        
        mui = np.array([face_landmarks.landmark[4].x, face_landmarks.landmark[4].y, face_landmarks.landmark[4].z])
        cam = np.array([face_landmarks.landmark[152].x, face_landmarks.landmark[152].y, face_landmarks.landmark[152].z])
        diem_tai_trai = np.array([face_landmarks.landmark[234].x, face_landmarks.landmark[234].y, face_landmarks.landmark[234].z])
        diem_tai_phai = np.array([face_landmarks.landmark[454].x, face_landmarks.landmark[454].y, face_landmarks.landmark[454].z])
        
        vector_tai = diem_tai_phai - diem_tai_trai
        vector_mat = mui - cam
        
        vector_tai = vector_tai / (np.linalg.norm(vector_tai) + 1e-6)
        vector_mat = vector_mat / (np.linalg.norm(vector_mat) + 1e-6)
        
        goc_yaw = math.asin(max(min(vector_tai[2], 1), -1)) * 180 / math.pi
        goc_pitch = math.asin(max(min(vector_mat[2], 1), -1)) * 180 / math.pi
        goc_roll = math.atan2(vector_mat[0], vector_mat[1]) * 180 / math.pi
        
        dac_trung = np.array([ear_trai, ear_phai, goc_yaw, goc_pitch, goc_roll])
        
        hinh_mat_trai = hinh_mat_trai.reshape(24, 24, 1)
        hinh_mat_phai = hinh_mat_phai.reshape(24, 24, 1)
        
        return hinh_mat_trai, hinh_mat_phai, dac_trung
    
    def ve_diem_mat_an_toan(self, frame, face_landmarks):
        """Ve landmarks mat mot cach an toan"""
        h, w, _ = frame.shape
        
        for idx in self.CHI_SO_MAT_TRAI:
            if idx < len(face_landmarks.landmark):
                x = int(face_landmarks.landmark[idx].x * w)
                y = int(face_landmarks.landmark[idx].y * h)
                cv2.circle(frame, (x, y), 1, (0, 255, 0), -1)
        
        for idx in self.CHI_SO_MAT_PHAI:
            if idx < len(face_landmarks.landmark):
                x = int(face_landmarks.landmark[idx].x * w)
                y = int(face_landmarks.landmark[idx].y * h)
                cv2.circle(frame, (x, y), 1, (0, 255, 0), -1)
    
    def xac_nhan_trang_thai_buon_ngu(self, ear_trung_binh, goc_yaw, thoi_gian_hien_tai):
        """Logic xac nhan trang thai buon ngu cai tien - ch·ªâ cho ML"""
        self.bo_dem_ear.append(ear_trung_binh)
        ear_trung_binh_bo_dem = np.mean(list(self.bo_dem_ear)) if len(self.bo_dem_ear) > 0 else ear_trung_binh
        
        nguong_dieu_chinh = self.NGUONG_EAR
        nguong_nghiem_ngat_dieu_chinh = self.NGUONG_EAR_NGHIEM_NGAT
        
        if abs(goc_yaw) > 15:
            nguong_dieu_chinh *= 1.15
            nguong_nghiem_ngat_dieu_chinh *= 1.1
        
        trang_thai_mat = "mo"
        mau_trang_thai = (0, 255, 0)
        
        if ear_trung_binh < nguong_nghiem_ngat_dieu_chinh:
            trang_thai_mat = "nham_hoan_toan"
            mau_trang_thai = (0, 0, 255)
            self.dem_mat_nham += 1
            self.dem_mat_mo_lien_tuc = 0
        elif ear_trung_binh < nguong_dieu_chinh:
            trang_thai_mat = "dang_nham"
            mau_trang_thai = (0, 165, 255)
            self.dem_mat_nham += 1
            self.dem_mat_mo_lien_tuc = 0
        else:
            trang_thai_mat = "mo"
            mau_trang_thai = (0, 255, 0)
            self.dem_mat_mo_lien_tuc += 1
            if self.dem_mat_mo_lien_tuc >= self.SO_FRAME_XAC_NHAN_TINH_TAO:
                self.dem_mat_nham = 0
                self.thoi_gian_mat_nham = 0
                self.thoi_gian_tinh_tao = thoi_gian_hien_tai
        
        co_buon_ngu = False
        van_ban_trang_thai = "ML: Tinh tao"
        mau_trang_thai_chinh = (0, 255, 0)
        
        if self.dem_mat_nham >= self.NGUONG_MAT_NHAM_FRAME:
            if self.thoi_gian_mat_nham == 0:
                self.thoi_gian_mat_nham = thoi_gian_hien_tai
            
            thoi_gian_mat_nham_lien_tuc = thoi_gian_hien_tai - self.thoi_gian_mat_nham
            
            if thoi_gian_mat_nham_lien_tuc >= self.NGUONG_THOI_GIAN_BUON_NGU:
                co_buon_ngu = True
                van_ban_trang_thai = f"ML: BUON NGU! ({thoi_gian_mat_nham_lien_tuc:.1f}s)"
                mau_trang_thai_chinh = (0, 0, 255)
            else:
                van_ban_trang_thai = f"ML: Nghi ngo ({thoi_gian_mat_nham_lien_tuc:.1f}s)"
                mau_trang_thai_chinh = (0, 165, 255)
        
        return {
            'co_buon_ngu': co_buon_ngu,
            'trang_thai_mat': trang_thai_mat,
            'van_ban_trang_thai': van_ban_trang_thai,
            'mau_trang_thai': mau_trang_thai,
            'mau_trang_thai_chinh': mau_trang_thai_chinh,
            'ear_trung_binh': ear_trung_binh,
            'ear_trung_binh_bo_dem': ear_trung_binh_bo_dem,
            'dem_mat_nham': self.dem_mat_nham,
            'thoi_gian_mat_nham': thoi_gian_hien_tai - self.thoi_gian_mat_nham if self.thoi_gian_mat_nham > 0 else 0
        }
    
    def xu_ly_frame(self, frame):
        """Xu ly frame video chinh: ML (EAR) + DL (YOLOv8n) + FUSION"""
        thoi_gian_hien_tai = time.time()
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        ket_qua = self.face_mesh.process(frame_rgb)
        
        # Kh·ªüi t·∫°o th√¥ng tin tr·∫°ng th√°i ML
        thong_tin_ml = {
            'co_buon_ngu': False,
            'trang_thai_mat': 'khong_phat_hien',
            'van_ban_trang_thai': 'ML: Khong phat hien khuon mat',
            'mau_trang_thai': (0, 0, 255),
            'mau_trang_thai_chinh': (0, 0, 255),
            'ear_trung_binh': 0,
            'ear_trung_binh_bo_dem': 0,
            'dem_mat_nham': 0,
            'thoi_gian_mat_nham': 0
        }
        
        du_doan_mo_hinh = None
        diem_so_ml = 0.0
        ear_trung_binh = 0.0
        goc_yaw = 0.0
        
        # === ML PIPELINE (EAR) ===
        if ket_qua.multi_face_landmarks:
            for face_landmarks in ket_qua.multi_face_landmarks:
                self.ve_diem_mat_an_toan(frame, face_landmarks)
                hinh_mat_trai, hinh_mat_phai, dac_trung = self.trich_xuat_dac_trung(frame, face_landmarks)
                ear_trung_binh = (dac_trung[0] + dac_trung[1]) / 2
                goc_yaw = dac_trung[2]
                
                self.bo_dem_dac_trung.append((hinh_mat_trai, hinh_mat_phai, dac_trung))
                thong_tin_ml = self.xac_nhan_trang_thai_buon_ngu(ear_trung_binh, goc_yaw, thoi_gian_hien_tai)
                
                # T√≠nh ƒëi·ªÉm s·ªë ML
                diem_so_ml = self.tinh_diem_so_ml_buon_ngu(
                    ear_trung_binh, goc_yaw, thong_tin_ml['thoi_gian_mat_nham']
                )
                break
        
        # === DL PIPELINE (YOLOv8n detection) ===
        yolo_results = None
        yolo_label = None
        yolo_confidence = 0.0
        diem_so_dl = 0.0
        
        if self.yolo_model is not None:
            try:
                yolo_results = self.yolo_model.predict(frame, verbose=False)
                for r in yolo_results:
                    boxes = r.boxes.cpu().numpy() if hasattr(r, 'boxes') else []
                    names = r.names if hasattr(r, 'names') else {0: 'alert', 1: 'drowsy'}
                    for box in boxes:
                        cls = int(box.cls[0])
                        yolo_confidence = float(box.conf[0])
                        label = names.get(cls, str(cls))
                        yolo_label = label
                        break
                
                # T√≠nh ƒëi·ªÉm s·ªë DL (c√≥ logic 4 frame)
                diem_so_dl = self.tinh_diem_so_dl_buon_ngu(yolo_label, yolo_confidence)
                
            except Exception as e:
                print(f"[YOLOv8] L·ªói khi detect: {e}")
        
        # === FUSION ML + DL ===
        ket_qua_fusion = self.hop_nhat_ket_qua_ml_dl(diem_so_ml, diem_so_dl, yolo_label)
        
        # X·ª≠ l√Ω c·∫£nh b√°o d·ª±a tr√™n k·∫øt qu·∫£ fusion
        if ket_qua_fusion['trang_thai_fusion'] == 'buon_ngu':
            if thoi_gian_hien_tai - self.thoi_gian_canh_bao_cuoi >= self.THOI_GIAN_CHO_GIUA_CANH_BAO:
                self.thoi_gian_canh_bao_cuoi = thoi_gian_hien_tai
                self.SO_LAN_CANH_BAO_TICH_LUY += 1
                
        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        self.hien_thi_thong_tin_frame(frame, thong_tin_ml, du_doan_mo_hinh, yolo_label, ket_qua_fusion)
        
        return frame, thong_tin_ml, du_doan_mo_hinh, yolo_label, ket_qua_fusion

    def hien_thi_thong_tin_frame(self, frame, thong_tin_ml=None, du_doan_mo_hinh=None, yolo_label=None, ket_qua_fusion=None):
        """Hi·ªÉn th·ªã th√¥ng tin t·ªëi gi·∫£n tr√™n frame"""
        h, w, _ = frame.shape
        
        # === HI·ªÇN TH·ªä TR·∫†NG TH√ÅI CH√çNH (FUSION) ===
        if ket_qua_fusion:
            # Tr·∫°ng th√°i ch√≠nh t·ª´ fusion - ch·ªâ hi·ªÉn th·ªã tr·∫°ng th√°i v√† m·ª©c ƒë·ªô
            trang_thai_text = f"TRANG THAI: {ket_qua_fusion['trang_thai_fusion'].upper()}"
            if ket_qua_fusion['trang_thai_fusion'] == 'buon_ngu':
                trang_thai_text = f"CANH BAO: BUON NGU!"
            
            # Hi·ªÉn th·ªã tr·∫°ng th√°i ch√≠nh
            cv2.putText(frame, trang_thai_text, (10, 40), 
                       cv2.FONT_HERSHEY_SIMPLEX, 1.0, ket_qua_fusion['mau_fusion'], 3)
            
            # Ch·ªâ hi·ªÉn th·ªã ƒëi·ªÉm tin c·∫≠y khi bu·ªìn ng·ªß
            if ket_qua_fusion['trang_thai_fusion'] in ['buon_ngu', 'canh_bao']:
                cv2.putText(frame, f"Do tin cay: {ket_qua_fusion['do_tin_cay']:.2f}", (10, 80), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.6, ket_qua_fusion['mau_fusion'], 2)
        
        # === HI·ªÇN TH·ªä TH√îNG TIN B·ªî SUNG T·ªêI GI·∫¢N ===
        # Ch·ªâ hi·ªÉn th·ªã EAR khi c·∫ßn thi·∫øt
        if thong_tin_ml and thong_tin_ml['ear_trung_binh'] < 0.3:
            cv2.putText(frame, f"EAR: {thong_tin_ml['ear_trung_binh']:.3f}", (10, h - 30), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
        
        # Hi·ªÉn th·ªã tr·∫°ng th√°i DL ƒë∆°n gi·∫£n
        if yolo_label is not None:
            dl_color = (0, 255, 0) if yolo_label == 'alert' else (0, 0, 255)
            cv2.putText(frame, f"DL: {yolo_label.upper()}", (w - 150, 40), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.6, dl_color, 2)
        # Ch·ªâ hi·ªÉn th·ªã s·ªë l·∫ßn c·∫£nh b√°o khi c√≥ c·∫£nh b√°o
        if self.SO_LAN_CANH_BAO_TICH_LUY > 0:
            cv2.putText(frame, f"Canh bao: {self.SO_LAN_CANH_BAO_TICH_LUY}", (10, h - 60), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2)

    def phat_am_thanh_canh_bao(self):
        """Ph√°t √¢m thanh c·∫£nh b√°o bu·ªìn ng·ªß"""
        if self.co_am_thanh:
            try:
                # T·∫°o √¢m thanh c·∫£nh b√°o ƒë∆°n gi·∫£n
                frequency = 800  # Hz
                duration = 500   # milliseconds
                sample_rate = 22050
                frames = int(duration * sample_rate / 1000)
                
                arr = np.zeros(frames)
                for i in range(frames):
                    arr[i] = np.sin(2 * np.pi * frequency * i / sample_rate)
                
                arr = (arr * 32767).astype(np.int16)
                sound = pygame.sndarray.make_sound(arr)
                sound.play()
            except Exception as e:
                print(f"L·ªói ph√°t √¢m thanh: {e}")

    def luu_bao_cao_session(self):
        """L∆∞u b√°o c√°o phi√™n l√†m vi·ªác"""
        thoi_gian_hien_tai = time.time()
        bao_cao = {
            'thoi_gian_ket_thuc': thoi_gian_hien_tai,
            'so_lan_canh_bao': self.SO_LAN_CANH_BAO_TICH_LUY,
            'tong_frame_buon_ngu': self.dem_frame_buon_ngu_fusion,
            'ty_le_fusion_scores': list(self.bo_dem_ket_qua_fusion) if self.bo_dem_ket_qua_fusion else [],
            'yolo_results': list(self.bo_dem_yolo_results) if self.bo_dem_yolo_results else []
        }
        
        try:
            import json
            with open(f'drowsiness_report_{int(thoi_gian_hien_tai)}.json', 'w', encoding='utf-8') as f:
                json.dump(bao_cao, f, indent=2, ensure_ascii=False)
            print(f"‚úÖ ƒê√£ l∆∞u b√°o c√°o: drowsiness_report_{int(thoi_gian_hien_tai)}.json")
        except Exception as e:
            print(f"‚ùå L·ªói l∆∞u b√°o c√°o: {e}")

    def chay_ung_dung(self):
        """Chay ung dung chinh v·ªõi fusion ML+DL"""
        print("=== HE THONG PHAT HIEN BUON NGU (ML + DL FUSION) ===")
        print("üîπ ML: S·ª≠ d·ª•ng EAR (Eye Aspect Ratio) v√† MediaPipe")
        print("üîπ DL: S·ª≠ d·ª•ng YOLOv8n detection")  
        print("üîπ FUSION: K·∫øt h·ª£p c·∫£ hai ph∆∞∆°ng ph√°p")
        print("üìù B·∫•m 'Q' ƒë·ªÉ tho√°t, 'S' ƒë·ªÉ l∆∞u b√°o c√°o")
        print("="*50)
        
        cap = cv2.VideoCapture(0)
        if not cap.isOpened():
            print("‚ùå Kh√¥ng th·ªÉ m·ªü camera!")
            return
        
        cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
        cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
        cap.set(cv2.CAP_PROP_FPS, 30)
        
        print("üì∏ Camera ƒë√£ s·∫µn s√†ng. Nh·∫•n 'Q' ƒë·ªÉ tho√°t.")
        
        try:
            while True:
                ret, frame = cap.read()
                if not ret:
                    print("‚ùå Kh√¥ng th·ªÉ ƒë·ªçc frame t·ª´ camera!")
                    break
                
                frame = cv2.flip(frame, 1)
                frame_da_xu_ly, thong_tin_ml, du_doan_mo_hinh, yolo_label, ket_qua_fusion = self.xu_ly_frame(frame)
                
                # Hi·ªÉn th·ªã c·ª≠a s·ªï
                cv2.imshow('üöó Phat Hien Buon Ngu - ML+DL Fusion', frame_da_xu_ly)
                
                # Ph√°t c·∫£nh b√°o √¢m thanh n·∫øu c·∫ßn
                if ket_qua_fusion and ket_qua_fusion['trang_thai_fusion'] == 'buon_ngu':
                    if ket_qua_fusion['dem_frame_buon_ngu'] % 30 == 0:  # M·ªói gi√¢y ph√°t m·ªôt l·∫ßn
                        self.phat_am_thanh_canh_bao()
                
                # X·ª≠ l√Ω ph√≠m b·∫•m
                key = cv2.waitKey(1) & 0xFF
                if key == ord('q') or key == ord('Q'):
                    print("üîÑ ƒêang tho√°t ·ª©ng d·ª•ng...")
                    break
                elif key == ord('s') or key == ord('S'):
                    print("üíæ ƒêang l∆∞u b√°o c√°o...")
                    self.luu_bao_cao_session()
        
        except KeyboardInterrupt:
            print("‚ö†Ô∏è Nh·∫≠n Ctrl+C ƒë·ªÉ d·ª´ng ch∆∞∆°ng tr√¨nh")
        
        finally:
            cap.release()
            cv2.destroyAllWindows()
            print("üèÅ ƒê√£ ƒë√≥ng ·ª©ng d·ª•ng")
            
            # T·ª± ƒë·ªông l∆∞u b√°o c√°o khi tho√°t
            if self.SO_LAN_CANH_BAO_TICH_LUY > 0 or self.dem_frame_buon_ngu_fusion > 0:
                print("üíæ T·ª± ƒë·ªông l∆∞u b√°o c√°o cu·ªëi session...")
                self.luu_bao_cao_session()

    def in_thong_ke_hien_tai(self):
        """In th·ªëng k√™ hi·ªán t·∫°i c·ªßa h·ªá th·ªëng"""
        print("\n" + "="*50)
        print("üìä TH·ªêNG K√ä H·ªÜ TH·ªêNG HI·ªÜN T·∫†I")
        print("="*50)
        print(f"üî¢ S·ªë l·∫ßn c·∫£nh b√°o t√≠ch l≈©y: {self.SO_LAN_CANH_BAO_TICH_LUY}")
        print(f"üìä S·ªë frame bu·ªìn ng·ªß fusion: {self.dem_frame_buon_ngu_fusion}")
        print(f"‚öôÔ∏è Tr·ªçng s·ªë ML: {self.TRONG_SO_ML}")
        print(f"‚öôÔ∏è Tr·ªçng s·ªë DL: {self.TRONG_SO_DL}")
        print(f"üéØ Ng∆∞·ª°ng fusion: {self.NGUONG_FUSION_BUON_NGU}")
        
        if len(self.bo_dem_ket_qua_fusion) > 0:
            diem_trung_binh = np.mean(list(self.bo_dem_ket_qua_fusion))
            print(f"üìà ƒêi·ªÉm fusion trung b√¨nh: {diem_trung_binh:.3f}")
        
        if len(self.bo_dem_yolo_results) > 0:
            yolo_results = list(self.bo_dem_yolo_results)
            drowsy_count = sum(1 for r in yolo_results if r == 'drowsy')
            alert_count = sum(1 for r in yolo_results if r == 'alert')
            print(f"ü§ñ YOLO - Drowsy: {drowsy_count}, Alert: {alert_count}")
        
        print("="*50)

def main():
    """H√†m main v·ªõi x·ª≠ l√Ω l·ªói c·∫£i ti·∫øn"""
    try:
        print("üöÄ Kh·ªüi ƒë·ªông h·ªá th·ªëng ph√°t hi·ªán bu·ªìn ng·ªß...")
        
        # Kh·ªüi t·∫°o h·ªá th·ªëng
        he_thong = PhatHienBuonNgu()
        
        # In th√¥ng tin c·∫•u h√¨nh
        print(f"‚öôÔ∏è Tr·ªçng s·ªë ML: {he_thong.TRONG_SO_ML}")
        print(f"‚öôÔ∏è Tr·ªçng s·ªë DL: {he_thong.TRONG_SO_DL}")
        print(f"üéØ Ng∆∞·ª°ng fusion: {he_thong.NGUONG_FUSION_BUON_NGU}")
        
        # Ch·∫°y ·ª©ng d·ª•ng
        he_thong.chay_ung_dung()
        
        # In th·ªëng k√™ cu·ªëi
        he_thong.in_thong_ke_hien_tai()
        
    except Exception as e:
        print(f"‚ùå L·ªói trong qu√° tr√¨nh ch·∫°y ·ª©ng d·ª•ng: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        print("üîö Ch∆∞∆°ng tr√¨nh k·∫øt th√∫c")

if __name__ == "__main__":
    main()